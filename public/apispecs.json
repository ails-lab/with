{
    "swagger": "2.0",
    "info": {
        "version": "v0.6",
        "title": "WITH API",
        "description": "Welcome to the WITH API documentation! \n If you are completely new to the API, please visit ```link available soon``` for an introduction to the model and basic functionalities. \n We are still in a development phase, so expect changes. We will keep this documentation updated and this text will include a memo of the latest changes. \n \n NEW: \n \n (since v. 0.68) Many changes, added calls for annotations and various others. Added calls for internal search within and among user collections. Documentation will be further updated once a couple of things have finished.\n \n (since v. 0.6) Added a new call in search that merges filters, updated responses in record, collections with context data. ~ LAST UPDATE(v. 0.68): July 26, 2016"
    },
    "paths": {
        "/api/search": {
            "post": {
                "tags": [
                    "Search"
                ],
                "summary": "General search in external resources and the WITH database.",
                "description": "Body contains search parameters, response is a JSON array of records that match the search term. Boolean search supports use of AND, OR and NOT operators. Terms seperated without an operator (using a space) are treated as an AND. Use of quotes will perform exact term or phrase searches. For example, ```\"Olympian Zeus\"``` will search for the exact phrase, whereas ```Olympian Zeus``` will equate to ```Olympian AND Zeus```. For more search options use advanced search.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Search parameters.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "searchTerm": {
                                    "type": "string",
                                    "default": "zeus"
                                },
                                "page": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "pageSize": {
                                    "type": "integer",
                                    "default": 20
                                },
                                "source": {
                                    "description": "Different values such as Europeana, DPLA, DigitalNZ, Rijksmuseum, WITHin, and others.  Results from WITHin correspond to internal records.",
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "Europeana",
                                            "DPLA",
                                            "NLA",
                                            "DigitalNZ",
                                            "Youtube",
                                            "Rijksmuseum",
                                            "DDB",
                                            "BritishLibrary",
                                            "InternetArchive",
                                            "WITHin",
                                            "DBPedia",
                                            "Historypin",
                                            "WITHinASpace"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Responses"
                        }
                    },
                    "400": {
                        "description": "Bad request (invalid json)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/advancedsearch": {
            "post": {
                "tags": [
                    "Search"
                ],
                "summary": "Advanced search with filters (faceted sarch).",
                "description": "An extension of the simple search to include filters for search with facets. The values of the filters are NOT preset. To see what filters you can use, you should use the ```/api/intialfeatures``` call. Then you can send another query with some values of all the possible filters. To get a better understanding we suggest you use the inspector console of your favourite browser and observe the network activity while performing a search from the frontend, using different filter values.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Search parameters.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "searchTerm": {
                                    "type": "string",
                                    "default": "zeus"
                                },
                                "page": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "pageSize": {
                                    "type": "integer",
                                    "default": 10
                                },
                                "source": {
                                    "description": "Different values such as Europeana, DPLA, DigitalNZ, Rijksmuseum, WITHin, and others.  Results from WITHin correspond to internal records.",
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "Europeana",
                                            "DPLA",
                                            "NLA",
                                            "DigitalNZ",
                                            "Youtube",
                                            "Rijksmuseum",
                                            "DDB",
                                            "BritishLibrary",
                                            "InternetArchive",
                                            "WITHin",
                                            "DBPedia",
                                            "Historypin",
                                            "WITHinASpace"
                                        ]
                                    }
                                },
                                "filters": {
                                    "description": "To find information about filters we suggest you check the inspector console of a web browser while performing a faceted search from the frontend.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "filterID": {
                                                "type": "string",
                                                "default": "media.type"
                                            },
                                            "values": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "default": "image"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Search"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request (invalid json)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/initialfilters": {
            "post": {
                "summary": "Retrieve initial filters for a search.",
                "description": "Retrieve a JSON with the filters you can use for faceted search in the query. This call requires a body parameter with the sources you will need to process.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Sources.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "source": {
                                    "description": "Different values such as Europeana, DPLA, DigitalNZ, Rijksmuseum, WITHin, and others.  Results from WITHin correspond to internal records.",
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "Europeana",
                                            "DPLA",
                                            "NLA",
                                            "DigitalNZ",
                                            "Youtube",
                                            "Rijksmuseum",
                                            "DDB",
                                            "BritishLibrary",
                                            "InternetArchive",
                                            "WITHin",
                                            "DBPedia",
                                            "Historypin",
                                            "WITHinASpace"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                ],
                "tags": [
                    "Search"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Filters"
                        }
                    },
                    "400": {
                        "description": "Bad request (invalid json)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/searchsources": {
            "get": {
                "summary": "Retrieve the list of available search sources.",
                "description": "Retrieve a JSON with the list of sources that WITH currently supports for federated searches.",
                "tags": [
                    "Search"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request (invalid json)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/mergefilters": {
            "post": {
                "summary": "Merge filters from a search response.",
                "description": "Merges a list of  the \"filters\" field found in the SourceResponse. It returns the result of merging values with equal filterID.",
                "tags": [
                    "Search"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Sources.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Filters"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Filters"
                        }
                    },
                    "400": {
                        "description": "Bad request (invalid json)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/record/randomRecords": {
            "get": {
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "query",
                        "description": "This group will have read access to these records.",
                        "type": "string"
                    },
                    {
                        "name": "batchCount",
                        "in": "query",
                        "description": "How many records to be fetched.",
                        "type": "integer"
                    }
                ],
                "summary": "Get some random records.",
                "description": "Fetch a specified amount of randomly selected records that are visible to a group.",
                "tags": [
                    "Record",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InternalRecord"
                            }
                        }
                    }
                }
            }
        },
        "/record/annotationCount": {
            "get": {
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "query",
                        "description": "Specifies the group whose annotations to count.",
                        "type": "string"
                    }
                ],
                "summary": "Get the annotation count of a group.",
                "description": "Returns the total count of annotations a group has made and the number of annotated records.",
                "tags": [
                    "Record",
                    "Annotation",
                    "Group"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "annotatedRecords": {
                                    "type": "integer"
                                },
                                "annotations": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/record/contextData": {
            "post": {
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "query",
                        "required": true,
                        "description": "The collection Id that the record belongs to",
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Context data to add",
                        "schema": {
                            "$ref": "#/definitions/ContextData"
                        }
                    }
                ],
                "summary": "Update a record's context data.",
                "description": "Updates the context data in a record, in respect to a collection that the record belongs to.",
                "tags": [
                    "Record",
                    "Collection"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid json)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/record/{recordId}": {
            "parameters": [
                {
                    "name": "recordId",
                    "in": "path",
                    "required": true,
                    "description": "The id of the record",
                    "type": "string"
                }
            ],
            "get": {
                "parameters": [
                    {
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "description": "The id of the record",
                        "type": "string"
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The serialization of the response. One of the following:  JSON_UNKNOWN, JSONLD_UNKNOWN, XML_UNKNOWN, JSON_EDM, JSONLD_EDM, XML_EDM, JSONLD_DPLA, JSON_NLA, XML_NLA, JSON_DNZ, XML_DNZ, JSON_YOUTUBE, UKNOWN, all. If not specified, no content is returned, only basic collection fields.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "type": "string",
                        "default": "MEDIUM",
                        "enum": [
                            "BASIC",
                            "MEDIUM",
                            "FULL"
                        ],
                        "description": "Set to FULL to get all available metadata on the record, MEDIUM to remove some, and BASIC for the lightest version possible. "
                    },
                    {
                        "name": "locale",
                        "in": "query",
                        "type": "string",
                        "description": "Only shows a specific locale (language codes similar to the alpha2 country codes)."
                    }
                ],
                "summary": "Retrieve a record.",
                "description": "Retrieve a JSON with the metadata of the record specified in the path, by its Id. To retrieve the Ids of records in collections, you can use the ```collection/{collectionId}/list``` call see the ```dbid``` field in the response. Many different serializations are available for the record's metadata. To select one, or more of them, use the \"format\" parameter. The different serializations will appear in the \"content\" field in the record response. The profile parameter regulates the verbosity of the response. Use FULL to get all available metadata on the record, MEDIUM to remove some, and BASIC for the lightest version possible. ",
                "tags": [
                    "Record"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InternalRecord"
                        }
                    },
                    "404": {
                        "description": "Not found (format not found)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update a record.",
                "description": "Update the metadata of an existing record, specified by its id in the path. You only need to provide the fields you want updated in the record body.",
                "parameters": [
                    {
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "description": "The id of the record",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "A JSON with the updated metadata",
                        "schema": {
                            "$ref": "#/definitions/InternalRecord"
                        }
                    }
                ],
                "tags": [
                    "Record"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid json)",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no edit permissions)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/annotation/{annotationId}": {
            "parameters": [
                {
                    "name": "annotationId",
                    "in": "path",
                    "required": true,
                    "description": "The id of the annotation",
                    "type": "string"
                }
            ],
            "get": {
                "parameters": [
                    {
                        "name": "annotationId",
                        "in": "path",
                        "required": true,
                        "description": "The id of the annotation",
                        "type": "string"
                    }
                ],
                "summary": "Retrieve an annotation.",
                "description": "Retrieve a JSON with the metadata of the annotation specified in the path, by its Id.",
                "tags": [
                    "Annotation"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Annotations"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove an annotation.",
                "description": "Remove an existing annotation, specified by its id in the path.",
                "parameters": [
                    {
                        "name": "annotationId",
                        "in": "path",
                        "required": true,
                        "description": "The id of the annotation.",
                        "type": "string"
                    }
                ],
                "tags": [
                    "Annotation"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid id)",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no edit permissions)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/annotation/{annotationId}/approve": {
            "parameters": [
                {
                    "name": "annotationId",
                    "in": "path",
                    "required": true,
                    "description": "The id of the annotation",
                    "type": "string"
                }
            ],
            "get": {
                "parameters": [
                    {
                        "name": "annotationId",
                        "in": "path",
                        "required": true,
                        "description": "The id of the annotation",
                        "type": "string"
                    }
                ],
                "summary": "Approve an annotation.",
                "description": "Approves a submitted annotation specified in the path, by its Id.",
                "tags": [
                    "Annotation"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/annotation/{annotationId}/reject": {
            "parameters": [
                {
                    "name": "annotationId",
                    "in": "path",
                    "required": true,
                    "description": "The id of the annotation",
                    "type": "string"
                }
            ],
            "get": {
                "parameters": [
                    {
                        "name": "annotationId",
                        "in": "path",
                        "required": true,
                        "description": "The id of the annotation",
                        "type": "string"
                    }
                ],
                "summary": "Reject an annotation.",
                "description": "Rejects a submitted annotation specified in the path, by its Id.",
                "tags": [
                    "Annotation"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/list": {
            "get": {
                "parameters": [
                    {
                        "name": "directlyAccessedByUserOrGroup",
                        "in": "query",
                        "description": "Filters returned collections based on the specified rights for each user in the input array of JSON objects. Each user needs to have direct access rights to this collection and not through a usergroup (organization or project).",
                        "type": "string",
                        "default": "[\"username\": \"name\", \"rights\": \"OWN\"]"
                    },
                    {
                        "name": "creator",
                        "in": "query",
                        "description": "Filters returned collections based on the '''ownerId''' field of a collection, ie the Id of the user that created the collection.",
                        "type": "string"
                    },
                    {
                        "name": "isExhibition",
                        "in": "query",
                        "description": "If true returns only exhibitions, if false only collections and if unspecified returns both.",
                        "type": "boolean"
                    },
                    {
                        "name": "collectionHits",
                        "in": "query",
                        "type": "boolean",
                        "description": "If true returns the total numbers of exhibitions and/or collections this call may return (limited by the count).",
                        "default": false
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "default": 0,
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "default": 10,
                        "description": "Count (default 10)",
                        "type": "integer"
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "type": "string",
                        "default": "MEDIUM",
                        "enum": [
                            "BASIC",
                            "MEDIUM",
                            "FULL"
                        ],
                        "description": "Set to FULL to get all available metadata on the record, MEDIUM to remove some, and BASIC for the lightest version possible. "
                    },
                    {
                        "name": "locale",
                        "in": "query",
                        "type": "string",
                        "description": "Only shows a specific locale (language codes similar to the alpha2 country codes)."
                    }
                ],
                "summary": "Get a list of accessible collections.",
                "description": "This call returns a list of all the accessible collections (at least read access) to the logged in user. Using the parameter filters, you can narrow down the collections associated with a specific user. All filters are optional. Since this call has many parameters we suggest you go through all descriptions before using it.",
                "tags": [
                    "Collection"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "collectionsOrExhibitions": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Collection"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/listPublic": {
            "get": {
                "parameters": [
                    {
                        "name": "directlyAccessedByUserOrGroup",
                        "in": "query",
                        "description": "Filters returned collections based on the specified rights for each user in the input array of JSON objects. Each user needs to have direct access rights to this collection and not through a usergroup (organization or project). ",
                        "type": "string",
                        "default": "{\"username\": \"name\", \"rights\": \"OWN\"}"
                    },
                    {
                        "name": "creator",
                        "in": "query",
                        "description": "Filters returned collections based on the '''ownerId''' field of a collection, ie the Id of the user that created the collection.",
                        "type": "string"
                    },
                    {
                        "name": "isExhibition",
                        "in": "query",
                        "description": "If true returns only exhibitions, if false only collections and if unspecified returns both.",
                        "type": "boolean"
                    },
                    {
                        "name": "collectionHits",
                        "in": "query",
                        "type": "boolean",
                        "description": "If true returns the total numbers of exhibitions and/or collections this call may return (limited by the count).",
                        "default": false
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "default": 0,
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "default": 10,
                        "description": "Count (default 10)",
                        "type": "integer"
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "type": "string",
                        "default": "MEDIUM",
                        "enum": [
                            "BASIC",
                            "MEDIUM",
                            "FULL"
                        ],
                        "description": "Set to FULL to get all available metadata on the record, MEDIUM to remove some, and BASIC for the lightest version possible. "
                    },
                    {
                        "name": "locale",
                        "in": "query",
                        "type": "string",
                        "description": "Only shows a specific locale (language codes similar to the alpha2 country codes)."
                    }
                ],
                "summary": "Get a list of public collections.",
                "description": "This call returns a list of all public collections. Using the parameter filters, you can narrow down the collections associated with a specific user. All filters are optional. Since this call has many parameters we suggest you go through all descriptions before using it. The ```directyAccessedByUserOrGroup``` parameter filters results based on the access rights the users have to collections, even if they are public.",
                "tags": [
                    "Collection"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "collectionsOrExhibitions": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Collection"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/listShared": {
            "get": {
                "parameters": [
                    {
                        "name": "direct",
                        "in": "query",
                        "description": "If set to true, only collections shared directly (ie not via usergroups) with the logged in user will be shown. Default value is false.",
                        "type": "boolean"
                    },
                    {
                        "name": "directlyAccessedByUserOrGroup",
                        "in": "query",
                        "description": "Filters returned collections based on the specified rights for each user in the input array of JSON objects. Each user needs to have direct access rights to this collection and not through a usergroup (organization or project).",
                        "type": "string",
                        "default": "[\"username\": \"name\", \"rights\": \"OWN\"]"
                    },
                    {
                        "name": "creator",
                        "in": "query",
                        "description": "Filters returned collections based on the '''ownerId''' field of a collection, ie the Id of the user that created the collection.",
                        "type": "string"
                    },
                    {
                        "name": "isExhibition",
                        "in": "query",
                        "description": "If true returns only exhibitions, if false only collections and if unspecified returns both.",
                        "type": "boolean"
                    },
                    {
                        "name": "collectionHits",
                        "in": "query",
                        "type": "boolean",
                        "description": "If true returns the total numbers of exhibitions and/or collections this call may return (limited by the count).",
                        "default": false
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "default": 0,
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "default": 10,
                        "description": "Count (default 10)",
                        "type": "integer"
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "type": "string",
                        "default": "MEDIUM",
                        "enum": [
                            "BASIC",
                            "MEDIUM",
                            "FULL"
                        ],
                        "description": "Set to FULL to get all available metadata on the record, MEDIUM to remove some, and BASIC for the lightest version possible. "
                    },
                    {
                        "name": "locale",
                        "in": "query",
                        "type": "string",
                        "description": "Only shows a specific locale (language codes similar to the alpha2 country codes)."
                    }
                ],
                "summary": "Get a list of collections shared with the user.",
                "description": "This call returns a list of all the collections that have been shared with the logged in user. This means, the user did not create these, nor are they necessarily public collections but has been given access rights to it. The filters are similar to the ```collection/list``` call. Using the parameter filters, you can narrow down the collections associated with a specific user. All filters are optional. Since this call has many parameters we suggest you go through all descriptions before using it.",
                "tags": [
                    "Collection"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Collection"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (user not specified)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/searchMyCollections": {
            "get": {
                "parameters": [
                    {
                        "name": "term",
                        "in": "query",
                        "description": "A search term.",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "offset",
                        "type": "integer"
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "limits number of results",
                        "type": "integer"
                    },
                    {
                        "name": "isShared",
                        "in": "query",
                        "description": "If true returns only collections that have been shared with the logged in user.",
                        "type": "boolean"
                    }
                ],
                "summary": "Search within your collections.",
                "description": "This call will return an array of your collections that match the search term. The results can be filtered by count, offset and shared status.",
                "tags": [
                    "Collection",
                    "Search"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "source": {
                                                "type": "string"
                                            },
                                            "totalCount": {
                                                "type": "integer"
                                            },
                                            "start": {
                                                "type": "integer"
                                            },
                                            "count": {
                                                "type": "integer"
                                            },
                                            "page": {
                                                "type": "integer"
                                            },
                                            "pageSize": {
                                                "type": "integer"
                                            },
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/definitions/Collection"
                                                }
                                            }
                                        }
                                    }
                                },
                                "sources": {
                                    "description": "Different values such as Europeana, DPLA, DigitalNZ, Rijksmuseum, WITHin, and others.  Results from WITHin correspond to internal records.",
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "Europeana",
                                            "DPLA",
                                            "NLA",
                                            "DigitalNZ",
                                            "Youtube",
                                            "Rijksmuseum",
                                            "DDB",
                                            "BritishLibrary",
                                            "InternetArchive",
                                            "WITHin",
                                            "DBPedia",
                                            "Historypin",
                                            "WITHinASpace"
                                        ]
                                    }
                                },
                                "continuationId": {
                                    "type": "string"
                                },
                                "query": {
                                    "type": "object",
                                    "properties": {
                                        "sources": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "enum": [
                                                    "Europeana",
                                                    "DPLA",
                                                    "NLA",
                                                    "DigitalNZ",
                                                    "Youtube",
                                                    "Rijksmuseum",
                                                    "DDB",
                                                    "BritishLibrary",
                                                    "InternetArchive",
                                                    "WITHin",
                                                    "DBPedia",
                                                    "Historypin",
                                                    "WITHinASpace"
                                                ]
                                            }
                                        },
                                        "filters": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/Filters"
                                            }
                                        },
                                        "start": {
                                            "type": "integer"
                                        },
                                        "count": {
                                            "type": "integer"
                                        },
                                        "page": {
                                            "type": "integer"
                                        },
                                        "pageSize": {
                                            "type": "integer"
                                        },
                                        "responseLanguage": {
                                            "type": "string"
                                        },
                                        "continuationId": {
                                            "type": "string"
                                        },
                                        "continuation": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no logged in user)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/searchMyExhibitions": {
            "get": {
                "parameters": [
                    {
                        "name": "term",
                        "in": "query",
                        "description": "A search term.",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "offset",
                        "type": "integer"
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "limits number of results",
                        "type": "integer"
                    },
                    {
                        "name": "isShared",
                        "in": "query",
                        "description": "If true returns only exhibitions that have been shared with the logged in user.",
                        "type": "boolean"
                    }
                ],
                "summary": "Search within your collections.",
                "description": "This call will return an array of your exhibitions that match the search term. The results can be filtered by count, offset and shared status.",
                "tags": [
                    "Exhibition",
                    "Search"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "source": {
                                                "type": "string"
                                            },
                                            "totalCount": {
                                                "type": "integer"
                                            },
                                            "start": {
                                                "type": "integer"
                                            },
                                            "count": {
                                                "type": "integer"
                                            },
                                            "page": {
                                                "type": "integer"
                                            },
                                            "pageSize": {
                                                "type": "integer"
                                            },
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/definitions/Collection"
                                                }
                                            }
                                        }
                                    }
                                },
                                "sources": {
                                    "description": "Different values such as Europeana, DPLA, DigitalNZ, Rijksmuseum, WITHin, and others.  Results from WITHin correspond to internal records.",
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "Europeana",
                                            "DPLA",
                                            "NLA",
                                            "DigitalNZ",
                                            "Youtube",
                                            "Rijksmuseum",
                                            "DDB",
                                            "BritishLibrary",
                                            "InternetArchive",
                                            "WITHin",
                                            "DBPedia",
                                            "Historypin",
                                            "WITHinASpace"
                                        ]
                                    }
                                },
                                "continuationId": {
                                    "type": "string"
                                },
                                "query": {
                                    "type": "object",
                                    "properties": {
                                        "sources": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "enum": [
                                                    "Europeana",
                                                    "DPLA",
                                                    "NLA",
                                                    "DigitalNZ",
                                                    "Youtube",
                                                    "Rijksmuseum",
                                                    "DDB",
                                                    "BritishLibrary",
                                                    "InternetArchive",
                                                    "WITHin",
                                                    "DBPedia",
                                                    "Historypin",
                                                    "WITHinASpace"
                                                ]
                                            }
                                        },
                                        "filters": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/Filters"
                                            }
                                        },
                                        "start": {
                                            "type": "integer"
                                        },
                                        "count": {
                                            "type": "integer"
                                        },
                                        "page": {
                                            "type": "integer"
                                        },
                                        "pageSize": {
                                            "type": "integer"
                                        },
                                        "responseLanguage": {
                                            "type": "string"
                                        },
                                        "continuationId": {
                                            "type": "string"
                                        },
                                        "continuation": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no logged in user)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/searchCollection/{collectionId}": {
            "parameters": [
                {
                    "name": "collectionId",
                    "in": "path",
                    "required": true,
                    "description": "Id of the collection",
                    "type": "string"
                }
            ],
            "get": {
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "Id of the collection",
                        "type": "string"
                    },
                    {
                        "name": "term",
                        "in": "query",
                        "description": "A search term.",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "offset",
                        "type": "integer"
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "limits number of results",
                        "type": "integer"
                    }
                ],
                "summary": "Search records within a collection.",
                "description": "This call will return an array of records that belong in a specified collection, and match the search term. ",
                "tags": [
                    "Collection",
                    "Record",
                    "Search"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "source": {
                                                "type": "string"
                                            },
                                            "totalCount": {
                                                "type": "integer"
                                            },
                                            "start": {
                                                "type": "integer"
                                            },
                                            "count": {
                                                "type": "integer"
                                            },
                                            "page": {
                                                "type": "integer"
                                            },
                                            "pageSize": {
                                                "type": "integer"
                                            },
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/definitions/InternalRecord"
                                                }
                                            }
                                        }
                                    }
                                },
                                "sources": {
                                    "description": "Different values such as Europeana, DPLA, DigitalNZ, Rijksmuseum, WITHin, and others.  Results from WITHin correspond to internal records.",
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "Europeana",
                                            "DPLA",
                                            "NLA",
                                            "DigitalNZ",
                                            "Youtube",
                                            "Rijksmuseum",
                                            "DDB",
                                            "BritishLibrary",
                                            "InternetArchive",
                                            "WITHin",
                                            "DBPedia",
                                            "Historypin",
                                            "WITHinASpace"
                                        ]
                                    }
                                },
                                "continuationId": {
                                    "type": "string"
                                },
                                "query": {
                                    "type": "object",
                                    "properties": {
                                        "sources": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "enum": [
                                                    "Europeana",
                                                    "DPLA",
                                                    "NLA",
                                                    "DigitalNZ",
                                                    "Youtube",
                                                    "Rijksmuseum",
                                                    "DDB",
                                                    "BritishLibrary",
                                                    "InternetArchive",
                                                    "WITHin",
                                                    "DBPedia",
                                                    "Historypin",
                                                    "WITHinASpace"
                                                ]
                                            }
                                        },
                                        "filters": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/Filters"
                                            }
                                        },
                                        "start": {
                                            "type": "integer"
                                        },
                                        "count": {
                                            "type": "integer"
                                        },
                                        "page": {
                                            "type": "integer"
                                        },
                                        "pageSize": {
                                            "type": "integer"
                                        },
                                        "responseLanguage": {
                                            "type": "string"
                                        },
                                        "continuationId": {
                                            "type": "string"
                                        },
                                        "continuation": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no logged in user)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/countMyAndShared": {
            "get": {
                "summary": "Returns the number of collections owned or shared with the user.",
                "description": "This call will return return the number of all collections owned by the logged in user or shared.",
                "tags": [
                    "Collection"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (no signed in user)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/featured": {
            "get": {
                "parameters": [
                    {
                        "name": "groupOrUserName",
                        "in": "query",
                        "description": "A user or group that owns the collections.",
                        "type": "string"
                    },
                    {
                        "name": "isExhibition",
                        "in": "query",
                        "description": "If true returns only exhibitions, if false only collections and if unspecified returns both.",
                        "type": "boolean"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "default": 0,
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "name": "countPerType",
                        "in": "query",
                        "default": 10,
                        "description": "Count per collection type (default 10)",
                        "type": "integer"
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "type": "string",
                        "default": "MEDIUM",
                        "enum": [
                            "BASIC",
                            "MEDIUM",
                            "FULL"
                        ],
                        "description": "Set to FULL to get all available metadata on the record, MEDIUM to remove some, and BASIC for the lightest version possible. "
                    },
                    {
                        "name": "locale",
                        "in": "query",
                        "type": "string",
                        "description": "Only shows a specific locale (language codes similar to the alpha2 country codes)."
                    }
                ],
                "summary": "Get a list of collections shared with the user.",
                "description": "This call returns a list of all the collections that have been shared with the logged in user. This means, the user did not create these, nor are they necessarily public collections but has been given access rights to it. The filters are similar to the ```collection/list``` call. Using the parameter filters, you can narrow down the collections associated with a specific user. All filters are optional. Since this call has many parameters we suggest you go through all descriptions before using it.",
                "tags": [
                    "Collection"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "totalCollections": {
                                    "type": "integer"
                                },
                                "totalExhibitions": {
                                    "type": "integer"
                                },
                                "collectionsOrExhibitions": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Collection"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (user or group does not exist)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/favorites": {
            "get": {
                "summary": "Returns the external ids of your favorite records.",
                "description": "This call will return an array of external Ids for all the favorited records of the logged in user.",
                "tags": [
                    "Record",
                    "Collection"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (user or group cannot be found)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/{collectionId}/listUsers": {
            "parameters": [
                {
                    "name": "collectionId",
                    "in": "path",
                    "required": true,
                    "description": "Id of the collection",
                    "type": "string"
                }
            ],
            "get": {
                "description": "Retrieves an array with all the users that have access to this collection and their access rights.",
                "summary": "Retrieve all users that have access to a collection.",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "Id of the collection",
                        "type": "string"
                    }
                ],
                "tags": [
                    "Collection",
                    "Exhibition",
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "OK (JSON contains the serialization specified)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ListUser"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (invalid collection id, no read access)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve records from database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/{collectionId}/list": {
            "parameters": [
                {
                    "name": "collectionId",
                    "in": "path",
                    "required": true,
                    "description": "Id of the collection",
                    "type": "string"
                }
            ],
            "get": {
                "description": "Retrieves all records from the collection specified in the path and returns an array of record objects. Record metadata can be available in different serializations. The format parameter defines this serialization in the records array field of the JSON response. See ```GET /record/{recordId}```. If the format parameter is empty, only the internal record will be provided in the WITH model.",
                "summary": "Retrieve all records in a collection.",
                "tags": [
                    "Collection",
                    "Exhibition",
                    "Record"
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "Id of the collection",
                        "type": "string"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "offset",
                        "type": "integer",
                        "default": 0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "count (default 10)",
                        "type": "integer",
                        "default": 10
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "One of the following:  JSON_UNKNOWN, JSONLD_UNKNOWN, XML_UNKNOWN, JSON_EDM, JSONLD_EDM, XML_EDM, JSONLD_DPLA, JSON_NLA, XML_NLA, JSON_DNZ, XML_DNZ, JSON_YOUTUBE, UKNOWN, all. If not specified, no content is returned, only basic collection fields.",
                        "type": "string",
                        "default": "noContent"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (JSON contains the serialization specified)",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "entryCount": {
                                    "type": "integer"
                                },
                                "records": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/InternalRecord"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (invalid collection id, no read access)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve records from database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/favoriteCollection": {
            "get": {
                "summary": "Get a collection that contains your favorite records.",
                "description": "This call will return a collection that contains all records marked as favourites.",
                "tags": [
                    "Record",
                    "Collection"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    },
                    "403": {
                        "description": "Forbidden (user not logged in)"
                    }
                }
            }
        },
        "/collection/sort/{collectionId}": {
            "parameters": [
                {
                    "name": "collectionId",
                    "in": "path",
                    "required": true,
                    "description": "Id of the collection",
                    "type": "string"
                }
            ],
            "get": {
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "Id of the collection",
                        "type": "string"
                    }
                ],
                "summary": "Sort the records of a collection.",
                "description": "This call will sort all records of a collection based on their quality measure. ",
                "tags": [
                    "Collection",
                    "Record"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no logged in user)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/liked": {
            "post": {
                "summary": "Adds a record to favourites.",
                "description": "This call adds a record in the favourites collection.",
                "tags": [
                    "Record",
                    "Collection"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Record JSON schema",
                        "schema": {
                            "$ref": "#/definitions/InternalRecord"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (double entry)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/{collectionId}/addRecord": {
            "parameters": [
                {
                    "name": "collectionId",
                    "in": "path",
                    "required": true,
                    "description": "Id of the collection or exhibition",
                    "type": "string"
                }
            ],
            "post": {
                "description": "Adds a record to the collection specified in the path, creating a new internal record that containts the submitted metadata. You will need to be logged in and have write access or be the owner of the collection in order to add records to it. Note that calls to this path can also be used for exhibitions. Position is a Mandatory field for exhibitions, the default is 0 i.e. the record will be displayed first. IMPORTANT This is the preferred way to create a new record! Different serializations for the new record will be created automatically and can be retrieved with ```GET /record/{recordId}```. You do not need to provide values for all the available fields. Finally, please note that this call will only return a message. To see the collection and the new record, you will need to use ```GET /collection/{collectionId}/list``` and parse the results for a list of the record metadata in the collection and the corresponding record dbids. For individual record metadata, use ```GET /record/{recordId}``` with the dbids retrieved.",
                "summary": "Create a new record and add it to a collection.",
                "tags": [
                    "Collection",
                    "Exhibition",
                    "Record"
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "Id of the collection",
                        "type": "string"
                    },
                    {
                        "name": "position",
                        "in": "query",
                        "description": "offset",
                        "type": "integer",
                        "default": 0
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Record JSON schema",
                        "schema": {
                            "$ref": "#/definitions/InternalRecord"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (no position in exhibition, constraint violation)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no permission to edit collection)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot save to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/{collectionId}/addRecords": {
            "parameters": [
                {
                    "name": "collectionId",
                    "in": "path",
                    "required": true,
                    "description": "Id of the collection or exhibition",
                    "type": "string"
                }
            ],
            "post": {
                "description": "This call will add an array of records to a collection. It works similar to ```collection/{collectionId}/addRecord```, but for many records in bulk.",
                "summary": "Create many new records and add to a collection.",
                "tags": [
                    "Collection",
                    "Exhibition",
                    "Record"
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "Id of the collection",
                        "type": "string"
                    },
                    {
                        "name": "noDouble",
                        "in": "query",
                        "description": "Automatically checks if duplicate records exist in the collection.",
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Record JSON schema",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InternalRecord"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (no position in exhibition, constraint violation)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no permission to edit collection)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot save to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/{collectionId}/removeRecord": {
            "parameters": [
                {
                    "name": "collectionId",
                    "in": "path",
                    "required": true,
                    "description": "Id of the collection or exhibition from which to remove the record",
                    "type": "string"
                }
            ],
            "delete": {
                "description": "Removes the record in the specified position, from a specified collection (path). Note that calls to this path can also be used for exhibitions.",
                "summary": "Remove a record from a collection.",
                "tags": [
                    "Collection",
                    "Exhibition",
                    "Record"
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "Id of the collection",
                        "type": "string"
                    },
                    {
                        "name": "position",
                        "in": "query",
                        "description": "offset",
                        "type": "integer",
                        "default": 0,
                        "required": true
                    },
                    {
                        "name": "recordId",
                        "in": "query",
                        "required": true,
                        "description": "Id of the record to remove.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (collection Id in string)",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no permission to edit collection)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (no or wrong record Id, cannot delete from database, exception error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/{collectionId}/moveRecord": {
            "parameters": [
                {
                    "name": "collectionId",
                    "in": "path",
                    "required": true,
                    "description": "Id of the collection or exhibition from which to remove the record",
                    "type": "string"
                }
            ],
            "put": {
                "description": "Moves record from a specified collection (path), to a different position. Note that calls to this path can also be used for exhibitions.",
                "summary": "Remove a record from a collection.",
                "tags": [
                    "Collection",
                    "Exhibition",
                    "Record"
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "Id of the collection",
                        "type": "string"
                    },
                    {
                        "name": "oldPosition",
                        "in": "query",
                        "description": "old position",
                        "type": "integer",
                        "default": 0,
                        "required": true
                    },
                    {
                        "name": "newPosition",
                        "in": "query",
                        "description": "new position",
                        "type": "integer",
                        "default": 0,
                        "required": true
                    },
                    {
                        "name": "recordId",
                        "in": "query",
                        "required": true,
                        "description": "Id of the record",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (collection Id in string)",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no permission to edit collection)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (no or wrong record Id, cannot delete from database, exception error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection": {
            "post": {
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Collection schema.",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    }
                ],
                "summary": "Create a new collection or exhibition.",
                "description": "This call will create a new collection or exhibition and store it in the database. Please use with caution as testing with this call will update your current collections!",
                "tags": [
                    "Collection",
                    "Exhibition"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "collection": {
                                    "$ref": "#/definitions/Collection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no read-access)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error(database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/importSearch": {
            "post": {
                "summary": "importSearch",
                "description": "imports search",
                "tags": [
                    "Collection"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Collection schema.",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    },
                    "403": {
                        "description": "Forbidden (no read-access)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error(database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/importIDs": {
            "post": {
                "summary": "import ids",
                "description": "imports ids",
                "tags": [
                    "Collection"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Collection schema.",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    },
                    "403": {
                        "description": "Forbidden (no read-access)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error(database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/importEuropeanaCollection": {
            "post": {
                "summary": "Import a collection from Europeana.",
                "description": "Creates a new collection and imports records from an existing Europeana collection. Take notice that the id parameter refers to Europeana's id. The limit parameter can be set to -1 to import all items.",
                "tags": [
                    "Collection"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": true,
                        "description": "Europeana's Id of the collection",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": true,
                        "description": "Limits number of items",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    },
                    "400": {
                        "description": "Bad Request (bad id)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error(database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/exportToOWL": {
            "get": {
                "parameters": [
                    {
                        "name": "cname",
                        "in": "query",
                        "description": "Name (label) of the collection",
                        "type": "string"
                    }
                ],
                "summary": "Export a collection to OWL.",
                "description": "Export to OWL.",
                "tags": [
                    "Collection",
                    "Exhibition"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "collection": {
                                    "$ref": "#/definitions/Collection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no read-access)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error(database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/{collectionId}": {
            "parameters": [
                {
                    "name": "collectionId",
                    "in": "path",
                    "description": "Internal id of the collection or exhibition",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "summary": "Retrieve collection metadata.",
                "description": "Returns the metadata of the collection specified in path. Note that calls to this path can also be used for exhibitions.",
                "tags": [
                    "Collection",
                    "Exhibition"
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "Id of the collection",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    },
                    "403": {
                        "description": "Forbidden (no read-access)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error(database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update metadata in a collection.",
                "description": "Use this call to change the stored metadata of a collection. Note that calls to this path can also be used for exhibitions.",
                "tags": [
                    "Collection",
                    "Exhibition"
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "Id of the collection",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "New collection/exhibtion metadata. Only provide the fields you wish to be changed!",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "owner": {
                                    "type": "string"
                                },
                                "access": {
                                    "type": "string"
                                },
                                "collection": {
                                    "$ref": "#/definitions/Collection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (null/invalid JSON, duplicate title, wrong JSON fields)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no read-access)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a collection.",
                "description": "Removes a collection from the database. Records that were created into this collection will also be deleted. Note that calls to this path can also be used for exhibitions.",
                "tags": [
                    "Collection",
                    "Exhibition"
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "Id of the collection",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    },
                    "403": {
                        "description": "Forbidden (no read-access)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/exhibition/{exhibitionId}/addBackgroundImg": {
            "parameters": [
                {
                    "name": "exhibitionId",
                    "in": "path",
                    "description": "Internal id of the collection or exhibition",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "parameters": [
                    {
                        "name": "exhibitionId",
                        "in": "path",
                        "description": "Internal id of the exhibition.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Media object schema.",
                        "schema": {
                            "properties": {
                                "media": {
                                    "$ref": "#/definitions/MediaRecord"
                                }
                            }
                        }
                    }
                ],
                "summary": "Add a background image to an exhibition.",
                "description": "This call will update the exhibition's background image in WITH. You need to create a media object beforehand and put the result in the body of this call.",
                "tags": [
                    "Exhibition"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no read-access)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error(database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group/create": {
            "post": {
                "parameters": [
                    {
                        "name": "adminId",
                        "in": "query",
                        "required": true,
                        "description": "User ID of the group administrator.",
                        "type": "string"
                    },
                    {
                        "name": "adminUsername",
                        "in": "query",
                        "required": true,
                        "description": "Username of the group administrator.",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Group metadata",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Create a new group.",
                "description": "Creates a new group and stores it at the database. Every group should have an administrator. Projects and organizations are different group types, to create one of those see their respective calls.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "description": "Bad Request(invalid json, did not specify group admin, duplicate group name or no name provided)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot save to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organization/create": {
            "post": {
                "parameters": [
                    {
                        "name": "adminId",
                        "in": "query",
                        "required": true,
                        "description": "User ID of the group administrator.",
                        "type": "string"
                    },
                    {
                        "name": "adminUsername",
                        "in": "query",
                        "required": true,
                        "description": "Username of the group administrator.",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Group metadata",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Create a new organization.",
                "description": "Creates a new organization and stores it at the database. Projects and generic groups are different group types, to create one of those see their respective calls.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "description": "Bad Request(invalid json, did not specify group admin, duplicate group name or no name provided)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot save to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/project/create": {
            "post": {
                "parameters": [
                    {
                        "name": "adminId",
                        "in": "query",
                        "required": true,
                        "description": "User ID of the group administrator.",
                        "type": "string"
                    },
                    {
                        "name": "adminUsername",
                        "in": "query",
                        "required": true,
                        "description": "Username of the group administrator.",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Group metadata",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Create a new project.",
                "description": "Creates a new project and stores it at the database. Organizations and generic groups are different group types, to create one of those see their respective calls.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "description": "Bad Request(invalid json, did not specify group admin, duplicate group name or no name provided)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot save to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group/findByGroupName": {
            "get": {
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "description": "group name or email",
                        "type": "string",
                        "default": "ntua"
                    },
                    {
                        "name": "collectionId",
                        "in": "query",
                        "required": false,
                        "description": "A collection id to check for access rights",
                        "type": "string"
                    }
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Find a user or group by name or email.",
                "description": "Returns a JSON object with metadata for the group that has the specified or email address. This call can be applied to all group types, i.e. organizations and projects. An optional functionality of this call is to check what access rights a group or user has to a collection by filling the ```collectionId``` parameter. The access rights will be returned as an extra field named ```accessRights``` in the group JSON response.",
                "responses": {
                    "200": {
                        "description": "OK (found group)",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "description": "Bad Request (no group found)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group/descendantGroups/{groupId}": {
            "parameters": [
                {
                    "name": "groupId",
                    "in": "path",
                    "required": true,
                    "description": "Id of a group.",
                    "type": "string"
                }
            ],
            "get": {
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    },
                    {
                        "name": "direct",
                        "in": "query",
                        "description": "Only direct descendants (default is true)",
                        "type": "boolean"
                    }
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Find subgroups of a group.",
                "description": "Retrieves the specified group's descendant groups in the group hierarchy. See '''/group/addUserOrGroup/{groupId}'''.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                }
            }
        },
        "/group/descendantOrganizations/{groupId}": {
            "parameters": [
                {
                    "name": "groupId",
                    "in": "path",
                    "required": true,
                    "description": "Id of a group.",
                    "type": "string"
                }
            ],
            "get": {
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    },
                    {
                        "name": "direct",
                        "in": "query",
                        "description": "Only direct descendants (default is true)",
                        "type": "boolean"
                    }
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Find subgroups of an organization.",
                "description": "Retrieves the specified group's descendant organizations in the group hierarchy. See '''/group/addUserOrGroup/{groupId}'''.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                }
            }
        },
        "/group/descendantProjects/{groupId}": {
            "parameters": [
                {
                    "name": "groupId",
                    "in": "path",
                    "required": true,
                    "description": "Id of a group.",
                    "type": "string"
                }
            ],
            "get": {
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    },
                    {
                        "name": "direct",
                        "in": "query",
                        "description": "Only direct descendants (default is true)",
                        "type": "boolean"
                    }
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Find subgroups of a project.",
                "description": "Retrieves the specified group's descendant projects in the group hierarchy. See '''/group/addUserOrGroup/{groupId}'''.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                }
            }
        },
        "/group/list": {
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Get a list of groups you belong to.",
                "description": "Retrieves a list of all group the logged in user belongs to. This call selectively can be applied to all group types, ie organizations and projects. You can also specify if you want groups you belong to directly or through the group hierarchy.",
                "parameters": [
                    {
                        "name": "groupType",
                        "in": "query",
                        "description": "Type of group.",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "offset",
                        "type": "integer"
                    },
                    {
                        "name": "belongsOnly",
                        "in": "query",
                        "description": "True if you belong to the group directly and not through the group hierarchy",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve or save to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group/{groupId}": {
            "parameters": [
                {
                    "name": "groupId",
                    "in": "path",
                    "required": true,
                    "description": "Id of a group.",
                    "type": "string"
                }
            ],
            "put": {
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "New group metadata. You only need to provide the fields you want to change.",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Edit a group.",
                "description": "Changes attributes of an existing group. You only need to provide the fields you want to change. Only the administrator of a group has the right to edit it. This call can be applied to all group types, ie organizations and projects.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid json, duplicate group name or no name provided)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (only group admins can edit groups)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve or save to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Retrieve group info.",
                "description": "Retrieves attributes of a group from the database. This call can be applied to all group types, ie organizations and projects.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve or save to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Group"
                ],
                "summary": "Delete a group.",
                "description": "Removes a group from the database. Only the group admin can delete the group. This call can be applied to all group types, ie organizations and projects.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (successfully deleted)",
                        "schema": {
                            "properties": {
                                "OK": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (only group admins can edit groups)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot edit database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group/addUserOrGroup/{groupId}": {
            "parameters": [
                {
                    "name": "groupId",
                    "in": "path",
                    "required": true,
                    "description": "Id of a group",
                    "type": "string"
                }
            ],
            "put": {
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": true,
                        "description": "User or group ID to add in group",
                        "type": "string"
                    },
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    }
                ],
                "tags": [
                    "User",
                    "Group"
                ],
                "summary": "Add a user or another group to a group.",
                "description": "Adds a user or a group to the group with the group ID specified in the path. This call can be applied to all group types, ie organizations and projects. This way you can create a group hierarchy with organizations that belong to projects and different usergroups that belong to organizations.",
                "responses": {
                    "200": {
                        "description": "OK (successfully added user or group)",
                        "schema": {
                            "properties": {
                                "OK": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (wrong user or group id)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (only group admins can edit groups)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve or write to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group/removeUserOrGroup/{groupId}": {
            "parameters": [
                {
                    "name": "groupId",
                    "in": "path",
                    "required": true,
                    "description": "Id of a group",
                    "type": "string"
                }
            ],
            "delete": {
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": true,
                        "description": "User ID to remove from this group.",
                        "type": "string"
                    },
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    }
                ],
                "tags": [
                    "User",
                    "Group"
                ],
                "summary": "Removes a user from a group.",
                "description": "Removes a user from a group with the group ID specified in the path. This call can be applied to all group types, ie organizations and projects.",
                "responses": {
                    "200": {
                        "description": "OK (successfully removed user)",
                        "schema": {
                            "properties": {
                                "OK": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no rights for removal)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve or write to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group/join/{groupId}": {
            "parameters": [
                {
                    "name": "groupId",
                    "in": "path",
                    "required": true,
                    "description": "Id of a group",
                    "type": "string"
                }
            ],
            "put": {
                "tags": [
                    "User",
                    "Group"
                ],
                "summary": "Request to join a group.",
                "description": "Request to join the group specified by the ID in the path. The group admin will have to accept your request before you join. This call can be applied to all group types, ie organizations and projects.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (successfully submitted request)",
                        "schema": {
                            "properties": {
                                "OK": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve or write to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group/leave/{groupId}": {
            "parameters": [
                {
                    "name": "groupId",
                    "in": "path",
                    "required": true,
                    "description": "Id of a group",
                    "type": "string"
                }
            ],
            "put": {
                "tags": [
                    "User",
                    "Group"
                ],
                "summary": "Leave a group.",
                "description": "Leave the group specified by the ID in the path. This call can be applied to all group types, ie organizations and projects.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (successfully removed user)",
                        "schema": {
                            "properties": {
                                "OK": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve or write to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group/membersInfo/{groupId}": {
            "parameters": [
                {
                    "name": "groupId",
                    "in": "path",
                    "required": true,
                    "description": "Id of a group",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "User",
                    "Group"
                ],
                "summary": "See a group's members.",
                "description": "Retrieves a list with the members that belong in the specified group. The results can be either only users or groups, or both.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "description": "Result types.",
                        "type": "string",
                        "enum": [
                            "groups",
                            "users",
                            "both"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (successfully submitted request)",
                        "schema": {
                            "properties": {
                                "users": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/User"
                                    }
                                },
                                "groups": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Group"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve or write to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group/admin/{groupId}": {
            "parameters": [
                {
                    "name": "groupId",
                    "in": "path",
                    "required": true,
                    "description": "Id of a group",
                    "type": "string"
                }
            ],
            "put": {
                "tags": [
                    "User",
                    "Group"
                ],
                "summary": "Make someone a group admin.",
                "description": "Make someone an admin of a group. Only creators or other administrators can perform this operation.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Id of a user.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "OK": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (bad user id)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (logged in user is not an owner or admin)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve or write to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User",
                    "Group"
                ],
                "summary": "Remove a group admin.",
                "description": "Remove an admin from a group. Only creators or other administrators can perform this operation. The call returns an OK message if the specified user was not an admin.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Id of a user.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (remove admin or user was not an admin)",
                        "schema": {
                            "properties": {
                                "OK": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (bad user id)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (logged in user is not an owner or admin)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve or write to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group/{groupId}/addFeatured": {
            "parameters": [
                {
                    "name": "groupId",
                    "in": "path",
                    "required": true,
                    "description": "Id of a group",
                    "type": "string"
                }
            ],
            "post": {
                "tags": [
                    "Collection",
                    "Group"
                ],
                "summary": "Add featured collections and exhibitions to a group.",
                "description": "Add some collections to the featured collections and exhibitions that appear in the page of a group (Organization or Project). The body for this call is an object with two lists that contain collection or exhibition ids.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Id of a user.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "fCollections": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "fExhibitions": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "OK": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (bad group id or body)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (logged in user is not an owner or admin)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve or write to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/group/{groupId}/removeFeatured": {
            "parameters": [
                {
                    "name": "groupId",
                    "in": "path",
                    "required": true,
                    "description": "Id of a group",
                    "type": "string"
                }
            ],
            "post": {
                "tags": [
                    "Collection",
                    "Group"
                ],
                "summary": "Remove featured collections and exhibitions from a group.",
                "description": "Remove some collections from the featured collections and exhibitions that appear in the page of a group (Organization or Project). The body for this call is an object with two lists that contain collection or exhibition ids.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "description": "Id of a group.",
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Id of a user.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "fCollections": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "fExhibitions": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "OK": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (bad group id or body)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (logged in user is not an owner or admin)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (cannot retrieve or write to database)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rights/{collectionId}/{right}": {
            "parameters": [
                {
                    "name": "collectionId",
                    "in": "path",
                    "required": true,
                    "description": "Internal Id of the collection whose rights you wish to change",
                    "type": "string"
                },
                {
                    "name": "right",
                    "in": "path",
                    "required": true,
                    "description": "\"none\" (withdraws previously given rights), \"read\", \"write\", \"own\"",
                    "type": "string"
                }
            ],
            "get": {
                "summary": "Change access rights to a collection.",
                "description": "Changes access rights: \"none\" (withdraws previously given rights), \"read\", \"write\", \"own\", of a specified user (parameter) for a specifed collection (in path). Only the owner of a collection can use this call (you need to be loged in). Just one of username, email or userId needs to be provided.",
                "tags": [
                    "Rights",
                    "Collection"
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "Internal Id of the collection whose rights you wish to change",
                        "type": "string"
                    },
                    {
                        "name": "right",
                        "in": "path",
                        "required": true,
                        "description": "\"none\" (withdraws previously given rights), \"read\", \"write\", \"own\"",
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "query",
                        "description": "username of user to give rights to (or take away from)",
                        "type": "string"
                    },
                    {
                        "name": "membersDowngrade",
                        "in": "query",
                        "description": "downgrade members",
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (no user specified)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (no owner rights)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Interal Server Error (read/write database error)",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/media/create": {
            "post": {
                "summary": "Upload new media.",
                "description": "Upload a new media object. This call works in two ways. You can either upload a file or provide an external url to a file. An IMPORTANT difference is, when uploading a file, the request should be a multipart/form-data. When creating from a url however, it should be a JSON body. In any case, the fields are the same. You can optionally provide rights for the media, if none are provided the default value will be \"UNKNOWN\". Technical metadata for the new media will be automatically extracted. The returned object for this call is a list of URLs that point to the cached media object and its various representations. You can use the \"original\" url to create a record with the new media. The media ID is encoded in that url. See the call ```media/byUrl```, on how to use the url to get the media metadata.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Media metadata",
                        "schema": {
                            "$ref": "#/definitions/MediaRecord"
                        }
                    }
                ],
                "tags": [
                    "Media"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MediaReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid request)",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/media/{mediaId}": {
            "parameters": [
                {
                    "name": "mediaId",
                    "in": "path",
                    "required": true,
                    "description": "Internal Id of a media object.",
                    "type": "string"
                }
            ],
            "get": {
                "summary": "Get metadata for a media object.",
                "description": "Returns the metadata for the media object specified by the mediaId. The response of the ```media/create``` call contains values that are url paths to this call. The response depends on the \"file” parameter`s value. If true, it returs the media file, if false it returns the media metadata as indicated in the response sample.",
                "tags": [
                    "Media"
                ],
                "parameters": [
                    {
                        "name": "file",
                        "type": "boolean",
                        "required": true,
                        "in": "query",
                        "description": "Returns metadata or file."
                    },
                    {
                        "name": "mediaId",
                        "in": "path",
                        "required": true,
                        "description": "Internal Id of a media object.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MediaObjectEmbedded"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid request)",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Edit metadata for a media object.",
                "description": "Update the metadata for the media object specified by the mediaId.",
                "tags": [
                    "Media"
                ],
                "parameters": [
                    {
                        "name": "file",
                        "type": "boolean",
                        "required": true,
                        "in": "query",
                        "description": "Updates metadata or file."
                    },
                    {
                        "name": "mediaId",
                        "in": "path",
                        "required": true,
                        "description": "Internal Id of a media object.",
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Media metadata",
                        "schema": {
                            "$ref": "#/definitions/MediaObjectEmbedded"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MediaObjectEmbedded"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid request)",
                        "schema": {
                            "$ref": "#/definitions/MediaReply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a media object.",
                "description": "Removes the database entry for the media object specified by the url parameter.",
                "tags": [
                    "Media"
                ],
                "parameters": [
                    {
                        "name": "mediaId",
                        "in": "path",
                        "required": true,
                        "description": "Internal Id of a media object.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid request)",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "description": "Returns metadata for the logged in user.",
                "summary": "See your user metadata.",
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request (no logged in user)",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (database error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "tags": [
                    "User"
                ],
                "description": "Creates a new user and stores at the database.",
                "summary": "Create new user.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Contains JSON of the user to create",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "firstName": {
                                    "type": "string"
                                },
                                "lastName": {
                                    "type": "string"
                                },
                                "username": {
                                    "type": "string"
                                },
                                "email": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                },
                                "gender": {
                                    "type": "string"
                                },
                                "facebookId": {
                                    "type": "string"
                                },
                                "googleID": {
                                    "type": "string"
                                },
                                "about": {
                                    "type": "string"
                                },
                                "location": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request (json object describes all errors)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "User login.",
                "description": "Log an user in (create a browser cookie). Some API calls do not take the user as a parameter and you need to be logged in first. You can log in with your googleId but for facebook you should use ```/user/facebookLogin```. The email parameter can be a username.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Email or username and password",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                },
                                "googleId": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (creates login browser cookie, returns user metadata JSON including userID.)",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request (error status, problem description JSON object)",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/user/facebookLogin": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "User login.",
                "description": "Log an user in with their facebook id.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "accessToken",
                        "description": "Facebook access token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "facebookId",
                        "description": "Facebook id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (creates login browser cookie, returns user metadata JSON including userID.)",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request (couldn't validate user)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/googleLogin": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "User login.",
                "description": "Log an user in with their facebook id.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "accessToken",
                        "description": "Facebook access token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "facebookId",
                        "description": "Facebook id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (creates login browser cookie, returns user metadata JSON including userID.)",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request (couldn't validate user)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "description": "Browser cookie is removed, user is logged out (all session information is kept in cookie, nothing is stored on server).",
                "summary": "User logout.",
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user/emailAvailable": {
            "get": {
                "tags": [
                    "User",
                    "Group"
                ],
                "summary": "Check email availability.",
                "description": "Used when registering a new user, checks if there has been another user with the same email already stored in the database.",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Proposed email address",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request (not available)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/{userId}": {
            "parameters": [
                {
                    "name": "userId",
                    "in": "path",
                    "description": "Internal ID of a user",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "summary": "Get user details.",
                "description": "Returns the complete entry of a user specified by the id provided in the path.",
                "tags": [
                    "User"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Internal ID of a user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request (user does not exist, exception error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update a user entry.",
                "description": "Updates the stored info of the user specified by the id provided in the path.",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Internal ID of a user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "New user entry",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request (error status, problem description JSON object)",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Deletes the user.",
                "description": "Removes a user from the database. (This call might not function currently at the moment.)",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Internal ID of a user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (user does not exist)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/resetPassword/{emailOrUserName}": {
            "parameters": [
                {
                    "name": "emailOrUserName",
                    "in": "path",
                    "description": "Username or email",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Send a reset password email.",
                "description": "Sends an email to the user provided in the path. The email contains a link to a webpage where the user can provide a new password.",
                "parameters": [
                    {
                        "name": "emailOrUserName",
                        "in": "path",
                        "description": "Username or email",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid username or email, could not send email)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found (user email not found - if user had originally registered with google or facebook account))",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/apikey/create": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get an API key.",
                "description": "Automatically sends an API key to the stored email address of the logged in user.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "email": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (no user logged in, email already sent in past, email exception error)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error ( could not create API key)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/{id}/photo": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "User or group id",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "User",
                    "Group"
                ],
                "summary": "Get the profile thumbnail of a user or group.",
                "description": "Returns the photoId of the thumbnail the user or group use in their profile.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User or group id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "photoId": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (user or group do not exist)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/findByUserOrGroupNameOrEmail": {
            "get": {
                "parameters": [
                    {
                        "name": "userOrGroupNameOrEmail",
                        "in": "query",
                        "required": true,
                        "description": "user or group name or email",
                        "type": "string",
                        "default": "ntua"
                    },
                    {
                        "name": "collectionId",
                        "in": "query",
                        "required": false,
                        "description": "A collection id to check for access rights",
                        "type": "string"
                    }
                ],
                "tags": [
                    "User",
                    "Group"
                ],
                "summary": "Find a user or group by name or email.",
                "description": "Returns a JSON object with metadata for the a group or a user that have the specified user/group name or email address. This call can be applied to all group types, ie organizations and projects. An optional functionality of this call is to check what access rights a group or user has to a collection. Just use the ```collectionId``` parameter. The access rights will be returned as an extra field named ```accessRights``` in the group or user json response.",
                "responses": {
                    "200": {
                        "description": "OK (found group)",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "description": "Bad Request (no user or group found)",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/listNames": {
            "get": {
                "parameters": [
                    {
                        "name": "prefix",
                        "in": "query",
                        "required": true,
                        "description": "Optional prefix of user or group name",
                        "type": "string",
                        "default": "ntua"
                    },
                    {
                        "name": "onlyParents",
                        "in": "query",
                        "required": false,
                        "description": "If true filters results to groups and users that have other subgroups or subusers",
                        "type": "boolean",
                        "default": false
                    }
                ],
                "tags": [
                    "User",
                    "Group"
                ],
                "summary": "Find a user or group by name or email.",
                "description": "This call is mainly used for autocomplete functions. It returns an array of JSON objects that contain users and groups whose names match the prefix, as well a ```category``` field with values \"user\" or \"group\". This call can be applied to all group types, ie organizations and projects. The ```onlyParents``` parameter filters results so that only groups or users that contain other groups or users are shown.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "value": {
                                        "type": "string"
                                    },
                                    "data": {
                                        "type": "object",
                                        "properties": {
                                            "category": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/record/{recordId}/listAnnotations": {
            "parameters": [
                {
                    "name": "recordId",
                    "in": "path",
                    "required": true,
                    "description": "The id of the record",
                    "type": "string"
                }
            ],
            "get": {
                "parameters": [
                    {
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "description": "The id of the record",
                        "type": "string"
                    }
                ],
                "summary": "List the annotations of a record.",
                "description": "Shows a record's annotations.",
                "tags": [
                    "Record",
                    "Annotation"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Annotations"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/record/{recordId}/annotate": {
            "parameters": [
                {
                    "name": "recordId",
                    "in": "path",
                    "required": true,
                    "description": "The id of the record",
                    "type": "string"
                }
            ],
            "get": {
                "parameters": [
                    {
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "description": "The id of the record",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "A JSON with the annotation.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Annotations"
                            }
                        }
                    }
                ],
                "summary": "Annotate a record.",
                "description": "Adds annotations to a record.",
                "tags": [
                    "Record",
                    "Annotation"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/collection/{collectionId}/annotate": {
            "parameters": [
                {
                    "name": "collectionId",
                    "in": "path",
                    "required": true,
                    "description": "The id of the collection",
                    "type": "string"
                }
            ],
            "get": {
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "The id of the collection",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "A JSON with the annotation.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Annotations"
                            }
                        }
                    }
                ],
                "summary": "Annotate a collection.",
                "description": "Adds annotations to a collection.",
                "tags": [
                    "Collection",
                    "Annotation"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "User": {
            "description": "Describes a registered user in the database.",
            "type": "object",
            "required": [
                "firstName",
                "lastName",
                "username",
                "email",
                "md5Password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "facebookId": {
                    "type": "string"
                },
                "googleID": {
                    "type": "string"
                },
                "md5Password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "favorites": {
                    "type": "string"
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "friendlyName": {
                                "type": "string"
                            }
                        }
                    }
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "friendlyName": {
                                "type": "string"
                            }
                        }
                    }
                },
                "usergroups": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "friendlyName": {
                                "type": "string"
                            }
                        }
                    }
                },
                "usergroupsIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "adminGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "UserEmbedded": {
            "description": "Short description of registered users that appears under withCreatorInfo in WithResources.",
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                },
                "favorites": {
                    "type": "string"
                },
                "dbId": {
                    "type": "string"
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "friendlyName": {
                                "type": "string"
                            }
                        }
                    }
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "friendlyName": {
                                "type": "string"
                            }
                        }
                    }
                },
                "usergroups": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "friendlyName": {
                                "type": "string"
                            }
                        }
                    }
                },
                "usergroupsIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "adminGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ListUser": {
            "description": "Describes a registered user in the database.",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string",
                        "enum": [
                            "user",
                            "group"
                        ]
                    },
                    "userId": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "accessRights": {
                        "type": "string",
                        "enum": [
                            "READ",
                            "WRITE",
                            "OWN"
                        ]
                    }
                }
            }
        },
        "Group": {
            "description": "Describes a group, organization or project.",
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                },
                "about": {
                    "type": "string"
                },
                "privateGroup": {
                    "type": "boolean"
                },
                "dbId": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                },
                "adminIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "parentGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "page": {
                    "type": "object",
                    "properties": {
                        "address": {
                            "type": "string"
                        },
                        "city": {
                            "type": "string"
                        },
                        "country": {
                            "type": "string"
                        },
                        "url": {
                            "type": "string"
                        },
                        "cover": {
                            "$ref": "#/definitions/MediaReply"
                        },
                        "coordinates": {
                            "type": "object",
                            "properties": {
                                "latitude": {
                                    "type": "integer"
                                },
                                "longitude": {
                                    "type": "integer"
                                }
                            }
                        },
                        "featuredCollections": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "featuredExhibitions": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "Annotations": {
            "description": "Annotations schema",
            "type": "object",
            "properties": {
                "dbid": {
                    "type": "string"
                },
                "annotationWithURI": {
                    "type": "string"
                },
                "annotators": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "withCreator": {
                                "type": "string"
                            },
                            "generator": {
                                "type": "string"
                            },
                            "generated": {
                                "type": "string"
                            },
                            "lastModified": {
                                "type": "string"
                            },
                            "confidence": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "score": {
                    "type": "object",
                    "properties": {
                        "approvedBy": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "rejectedBy": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "body": {
                    "type": "object",
                    "properties": {
                        "uri": {
                            "type": "string"
                        },
                        "label": {
                            "$ref": "#/definitions/MultiLiteral"
                        },
                        "uriVocabulary": {
                            "type": "string"
                        }
                    }
                },
                "target": {
                    "type": "object",
                    "properties": {
                        "recordId": {
                            "type": "string"
                        },
                        "selector": {
                            "type": "object",
                            "properties": {
                                "property": {
                                    "type": "string"
                                },
                                "origValue": {
                                    "type": "string"
                                },
                                "origLang": {
                                    "type": "string"
                                },
                                "start": {
                                    "type": "integer"
                                },
                                "end": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        "WithResource": {
            "description": "This is the parent type of the WITH data model. Record and Collection models extend this model.",
            "type": "object",
            "properties": {
                "dbId": {
                    "type": "string"
                },
                "resourceType": {
                    "type": "string",
                    "enum": [
                        "WithResource",
                        "SimpleCollection",
                        "CollectionObject",
                        "CulturalObject",
                        "EuScreenObject",
                        "EventObject",
                        "PlaceObject",
                        "TimespanObject"
                    ]
                },
                "collectedIn": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "administrative": {
                    "$ref": "#/definitions/Administrative"
                },
                "usage": {
                    "$ref": "#/definitions/Usage"
                },
                "media": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MediaRecord"
                    }
                },
                "descriptiveData": {
                    "$ref": "#/definitions/DescriptiveData"
                },
                "withCreatorInfo": {
                    "$ref": "#/definitions/UserEmbedded"
                },
                "provenance": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Provenance"
                    }
                },
                "contextData": {
                    "$ref": "#/definitions/ContextData"
                },
                "qualityMeasure": {
                    "type": "integer"
                }
            }
        },
        "Collection": {
            "description": "Collection metadata.",
            "type": "object",
            "properties": {
                "dbId": {
                    "type": "string"
                },
                "resourceType": {
                    "type": "string",
                    "default": "SimpleCollection",
                    "enum": [
                        "SimpleCollection",
                        "WithResource",
                        "CollectionObject",
                        "CulturalObject",
                        "EuScreenObject",
                        "EventObject",
                        "PlaceObject",
                        "TimespanObject"
                    ]
                },
                "administrative": {
                    "$ref": "#/definitions/Administrative"
                },
                "usage": {
                    "$ref": "#/definitions/Usage"
                },
                "media": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MediaRecord"
                    }
                },
                "withCreatorInfo": {
                    "$ref": "#/definitions/UserEmbedded"
                },
                "contextData": {
                    "$ref": "#/definitions/ContextData"
                },
                "collectedResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContextData"
                    }
                },
                "descriptiveData": {
                    "$ref": "#/definitions/CollectionDescriptiveData"
                }
            }
        },
        "InternalRecord": {
            "description": "An individual record description and metadata. The fields exhibition and position are used only for records in exhibitions. This object schema is used for internal search responses (records stored in the WITH database).",
            "type": "object",
            "properties": {
                "dbId": {
                    "type": "string"
                },
                "resourceType": {
                    "type": "string",
                    "default": "CulturalObject",
                    "enum": [
                        "CulturalObject",
                        "WithResource",
                        "SimpleCollection",
                        "CollectionObject",
                        "EuScreenObject",
                        "EventObject",
                        "PlaceObject",
                        "TimespanObject"
                    ]
                },
                "collectedIn": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "administrative": {
                    "$ref": "#/definitions/Administrative"
                },
                "usage": {
                    "$ref": "#/definitions/Usage"
                },
                "media": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MediaRecord"
                    }
                },
                "withCreatorInfo": {
                    "$ref": "#/definitions/UserEmbedded"
                },
                "provenance": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Provenance"
                    }
                },
                "descriptiveData": {
                    "$ref": "#/definitions/CulturalDescriptiveData"
                },
                "qualityMeasure": {
                    "type": "integer"
                },
                "contextData": {
                    "$ref": "#/definitions/ContextData"
                },
                "content": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "type": "string",
                            "default": "value"
                        }
                    }
                }
            }
        },
        "ContextDataTarget": {
            "description": "Describes context of this resource.",
            "type": "object",
            "properties": {
                "collectionId": {
                    "type": "string"
                },
                "recordId": {
                    "type": "string"
                },
                "access": {
                    "$ref": "#/definitions/Access"
                }
            }
        },
        "ContextData": {
            "description": "Contains resources collected in this collection.",
            "type": "object",
            "properties": {
                "contextDataType": {
                    "type": "string"
                },
                "target": {
                    "$ref": "#/definitions/ContextDataTarget"
                },
                "body": {
                    "$ref": "#/definitions/ContextDataTarget"
                }
            }
        },
        "Administrative": {
            "description": "WITH related metadata.",
            "type": "object",
            "properties": {
                "withURI": {
                    "type": "string"
                },
                "access": {
                    "$ref": "#/definitions/Access"
                },
                "withCreator": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "lastModified": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "parentResourceID": {
                    "type": "string"
                }
            }
        },
        "Access": {
            "description": "Information related to access rights.",
            "type": "object",
            "properties": {
                "isPublic": {
                    "type": "boolean"
                },
                "acl": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "type": "string"
                            },
                            "level": {
                                "type": "string",
                                "enum": [
                                    "READ",
                                    "WRITE",
                                    "OWN",
                                    "NONE"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "CollectionInfo": {
            "description": "Internal collection IDs this object belongs to and the position in these collections.",
            "type": "object",
            "properties": {
                "collectionId": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                }
            }
        },
        "ExternalCollection": {
            "description": "Metadata related to external collections an object may belong to.",
            "type": "object",
            "properties": {
                "source": {
                    "type": "string"
                },
                "collectionUri": {
                    "type": "string"
                },
                "nextInSequenceUri": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "Usage": {
            "description": "Information related to the social aspect of WITH.",
            "type": "object",
            "properties": {
                "likes": {
                    "type": "integer"
                },
                "collected": {
                    "type": "integer"
                },
                "annotated": {
                    "type": "integer"
                },
                "viewCount": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Provenance": {
            "description": "Holds provenance metadata about a collected resource.",
            "type": "object",
            "properties": {
                "provider": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                },
                "resourceId": {
                    "type": "string"
                }
            }
        },
        "DescriptiveData": {
            "description": "Descriptive metadata vary depending on the type of the collected resource. The basic data structures of all the different types are: ```LiteralType, ResourceType, ResourceOrLiteralType```",
            "type": "object",
            "properties": {
                "label": {
                    "$ref": "#/definitions/MultiLiteral"
                },
                "description": {
                    "$ref": "#/definitions/MultiLiteral"
                },
                "keywords": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "isShownAt": {
                    "$ref": "#/definitions/ResourceOrLiteral"
                },
                "isShownBy": {
                    "$ref": "#/definitions/ResourceOrLiteral"
                },
                "metadataRights": {
                    "$ref": "#/definitions/ResourceOrLiteral"
                },
                "rdfType": {
                    "type": "string"
                },
                "sameAs": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WithDate"
                    }
                },
                "altLabels": {
                    "$ref": "#/definitions/MultiLiteral"
                },
                "country": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "city": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "quality": {
                    "type": "string",
                    "enum": [
                        "POOR",
                        "AVERAGE",
                        "GOOD",
                        "EXCELLENT"
                    ]
                }
            }
        },
        "CollectionDescriptiveData": {
            "description": "Extends DescriptiveData with fields unique to CollectionObjects.",
            "type": "object",
            "properties": {
                "label": {
                    "$ref": "#/definitions/MultiLiteral"
                },
                "description": {
                    "$ref": "#/definitions/MultiLiteral"
                },
                "keywords": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "isShownAt": {
                    "$ref": "#/definitions/ResourceOrLiteral"
                },
                "isShownBy": {
                    "$ref": "#/definitions/ResourceOrLiteral"
                },
                "metadataRights": {
                    "$ref": "#/definitions/ResourceOrLiteral"
                },
                "rdfType": {
                    "type": "string"
                },
                "sameAs": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WithDate"
                    }
                },
                "altLabels": {
                    "$ref": "#/definitions/MultiLiteral"
                },
                "country": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "city": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "quality": {
                    "type": "string",
                    "enum": [
                        "POOR",
                        "AVERAGE",
                        "GOOD",
                        "EXCELLENT"
                    ]
                },
                "dccreator": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dctermsaudience": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dclanguage": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                }
            }
        },
        "CulturalDescriptiveData": {
            "description": "Extends DescriptiveData with fields unique to Cultural Records.",
            "type": "object",
            "properties": {
                "label": {
                    "$ref": "#/definitions/MultiLiteral"
                },
                "description": {
                    "$ref": "#/definitions/MultiLiteral"
                },
                "keywords": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "isShownAt": {
                    "$ref": "#/definitions/ResourceOrLiteral"
                },
                "isShownBy": {
                    "$ref": "#/definitions/ResourceOrLiteral"
                },
                "metadataRights": {
                    "$ref": "#/definitions/ResourceOrLiteral"
                },
                "rdfType": {
                    "type": "string"
                },
                "sameAs": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WithDate"
                    }
                },
                "altLabels": {
                    "$ref": "#/definitions/MultiLiteral"
                },
                "country": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "city": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "quality": {
                    "type": "string",
                    "enum": [
                        "POOR",
                        "AVERAGE",
                        "GOOD",
                        "EXCELLENT"
                    ]
                },
                "dcidentifier": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dclanguage": {
                    "$ref": "#/definitions/MultiLiteral"
                },
                "dctype": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dccoverage": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dcrights": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dctermsspatial": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dccreator": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dccontribution": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dcformat": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dctermsmedium": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dcIsRelatedTo": {
                    "$ref": "#/definitions/MultiLiteralOrResource"
                },
                "dccreated": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WithDate"
                    }
                },
                "dcdate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WithDate"
                    }
                }
            }
        },
        "WithDate": {
            "description": "A date object.",
            "type": "object",
            "properties": {
                "isoDate": {
                    "type": "string"
                },
                "year": {
                    "type": "number"
                },
                "epoch": {
                    "$ref": "#/definitions/ResourceOrLiteral"
                },
                "approximation": {
                    "type": "number"
                },
                "uri": {
                    "type": "string"
                },
                "free": {
                    "type": "string"
                }
            }
        },
        "MultiLiteralOrResource": {
            "description": "Can either be a multiliteral or a resource.",
            "type": "object",
            "properties": {
                "default": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "en": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "MultiLiteral": {
            "description": "More than one RDF literal types.",
            "type": "object",
            "properties": {
                "default": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "en": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Literal": {
            "description": "An RDF literal type.",
            "type": "object",
            "properties": {
                "uri": {
                    "type": "string",
                    "default": "value"
                }
            }
        },
        "Resource": {
            "description": "An RDF resource type.",
            "type": "object",
            "properties": {
                "uri": {
                    "type": "string",
                    "default": "value"
                }
            }
        },
        "ResourceOrLiteral": {
            "description": "Either an RDF literal or a resource.",
            "type": "object",
            "properties": {
                "uri": {
                    "type": "string",
                    "default": "value"
                }
            }
        },
        "MediaObjectEmbedded": {
            "description": "Holds metadata for media objects, i.e. images, video, text or audio files that are the basis of records.",
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "withRights": {
                    "type": "string",
                    "enum": [
                        "Public",
                        "Restricted",
                        "Permission",
                        "Modify",
                        "Commercial",
                        "Creative_Commercial_Modify",
                        "Creative_Not_Commercial",
                        "Creative_Not_Modify",
                        "Creative_Not_Commercial_Modify",
                        "Creative_SA",
                        "Creative_BY",
                        "Creative",
                        "RR",
                        "RRRA",
                        "RRFA",
                        "UNKNOWN"
                    ]
                },
                "withUrl": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "width": {
                    "type": "integer"
                },
                "mediaVersion": {
                    "type": "string"
                },
                "originalRights": {
                    "$ref": "#/definitions/ResourceOrLiteral"
                },
                "mimeType": {
                    "type": "string"
                },
                "size": {
                    "type": "number"
                },
                "quality": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "IMAGE_SMALL",
                        "IMAGE_500k",
                        "IMAGE_1",
                        "IMAGE_4",
                        "TEXT_IMAGE"
                    ]
                }
            }
        },
        "MediaObjectExtended": {
            "description": "The extended media object extends the embedded media object with fields for more technical metadata.",
            "type": "object",
            "properties": {
                "dbid": {
                    "type": "string"
                },
                "mediaBytes": {
                    "type": "string"
                },
                "codec": {
                    "type": "string"
                },
                "durationSeconds": {
                    "type": "integer"
                },
                "spatialResolution": {
                    "type": "integer"
                },
                "bitRate": {
                    "type": "integer"
                },
                "frameRate": {
                    "type": "integer"
                },
                "colorSpace": {
                    "type": "string"
                },
                "componentColor": {
                    "type": "string"
                },
                "orientation": {
                    "type": "string"
                },
                "audioChannelNumber": {
                    "type": "integer"
                },
                "sampleSize": {
                    "type": "integer"
                },
                "sampleRate": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "withRights": {
                    "type": "string",
                    "enum": [
                        "Public",
                        "Restricted",
                        "Permission",
                        "Modify",
                        "Commercial",
                        "Creative_Commercial_Modify",
                        "Creative_Not_Commercial",
                        "Creative_Not_Modify",
                        "Creative_Not_Commercial_Modify",
                        "Creative_SA",
                        "Creative_BY",
                        "Creative",
                        "RR",
                        "RRRA",
                        "RRFA",
                        "UNKNOWN"
                    ]
                },
                "withUrl": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "width": {
                    "type": "integer"
                },
                "mediaVersion": {
                    "type": "string"
                },
                "originalRights": {
                    "$ref": "#/definitions/ResourceOrLiteral"
                },
                "mimeType": {
                    "type": "string"
                },
                "size": {
                    "type": "number"
                },
                "quality": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "IMAGE_SMALL",
                        "IMAGE_500k",
                        "IMAGE_1",
                        "IMAGE_4",
                        "TEXT_IMAGE"
                    ]
                }
            }
        },
        "SampleFilters": {
            "description": "This JSON Array contains details about the different filter values available as well as counts of records for each filter.",
            "type": "array",
            "items": {
                "type": "string",
                "default": "{ \"filterName\": \"Media Type\", \"filterID\": \"media.type\", \"suggestedValues\": [ { \"value\": \"IMAGE\", \"count\": 17104 }, { \"value\": \"AUDIO\", \"count\": 9792 }, { \"value\": \"VIDEO\", \"count\": 3454 }, { \"value\": \"TEXT\", \"count\": 2173 }, { \"value\": \"THREED\", \"count\": 6 } ] }, { \"filterName\": \"Provider\", \"filterID\": \"provider\", \"suggestedValues\": [ { \"value\": \"The European Library\", \"count\": 5978 } ] } ], [ { \"filterName\": \"Media Type\", \"filterID\": \"media.type\", \"suggestedValues\": [ { \"value\": \"IMAGE\", \"count\": 25734 }, { \"value\": \"TEXT\", \"count\": 3713 }, { \"value\": \"VIDEO\", \"count\": 373 }, { \"value\": \"AUDIO\", \"count\": 142 }, { \"value\": \"physical object\", \"count\": 2 } ] }, { \"filterName\": \"Provider\", \"filterID\": \"provider\", \"suggestedValues\": [ { \"value\": \"The New York Public Library\", \"count\": 10063 }, { \"value\": \"Mountain West Digital Library\", \"count\": 3110 }, { \"value\": \"Smithsonian Institution\", \"count\": 2731 }, { \"value\": \"California Digital Library\", \"count\": 2614 }, { \"value\": \"Minnesota Digital Library\", \"count\": 1752 }, { \"value\": \"The Portal to Texas History\", \"count\": 1616 }, { \"value\": \"University of Southern California. Libraries\", \"count\": 1429 }, { \"value\": \"North Carolina Digital Heritage Center\", \"count\": 1385 }, { \"value\": \"HathiTrust\", \"count\": 1300 }, { \"value\": \"Digital Commonwealth\", \"count\": 922 }, { \"value\": \"Empire State Digital Network\", \"count\": 816 }, { \"value\": \"Missouri Hub\", \"count\": 779 }, { \"value\": \"Digital Library of Georgia\", \"count\": 765 }, { \"value\": \"University of Washington\", \"count\": 629 }, { \"value\": \"National Archives and Records Administration\", \"count\": 580 }, { \"value\": \"Tennessee Digital Library\", \"count\": 507 }, { \"value\": \"ARTstor\", \"count\": 353 }, { \"value\": \"J. Paul Getty Trust\", \"count\": 289 }, { \"value\": \"Indiana Memory\", \"count\": 245 }, { \"value\": \"Internet Archive\", \"count\": 227 }, { \"value\": \"Kentucky Digital Library\", \"count\": 185 }, { \"value\": \"University of Virginia Library\", \"count\": 142 }, { \"value\": \"South Carolina Digital Library\", \"count\": 138 }, { \"value\": \"David Rumsey\", \"count\": 16 }, { \"value\": \"University of Illinois at Urbana-Champaign\", \"count\": 14 }, { \"value\": \"United States Government Publishing Office (GPO)\", \"count\": 13 }, { \"value\": \"Biodiversity Heritage Library\", \"count\": 6 }, { \"value\": \"Harvard Library\", \"count\": 5 } ] }"
            }
        },
        "Filters": {
            "description": "This JSON Array contains details about the different filter values available as well as counts of records for each filter.",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "filterName": {
                        "type": "string"
                    },
                    "filterID": {
                        "type": "string"
                    },
                    "suggestedValues": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                },
                                "count": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        "Responses": {
            "description": "This Array contains results from each external source, seperated in respecting objects. Note that the facets field is NOT used in the faceted search. The filters field contains filters seperated for the corresponding source.",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer"
                    },
                    "startIndex": {
                        "type": "integer"
                    },
                    "count": {
                        "type": "integer"
                    },
                    "items": {
                        "type": "object",
                        "properties": {
                            "culturalCHO": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/InternalRecord"
                                }
                            },
                            "recordResource": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/InternalRecord"
                                }
                            },
                            "itemsCount": {
                                "type": "integer"
                            }
                        }
                    },
                    "source": {
                        "type": "string"
                    },
                    "facets": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "fields": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "label": {
                                                "type": "string"
                                            },
                                            "count": {
                                                "type": "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/Filters"
                        }
                    }
                }
            }
        },
        "Search": {
            "description": "The search response contains two JSON array objects. Responses contains objects corresponding to each external source queried for the search. Filters contains aggregated filters from all the available sources. Inside the response array objects however, there are filter objects that contain the filters for each individual source.",
            "type": "object",
            "properties": {
                "responses": {
                    "$ref": "#/definitions/Responses"
                },
                "filters": {
                    "$ref": "#/definitions/Filters"
                }
            }
        },
        "MediaReply": {
            "description": "This is an object with paths to the call that returns the original media object and four different types of thumbnail (also media objects).",
            "type": "object",
            "properties": {
                "original": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                }
            }
        },
        "MediaRecord": {
            "description": "This is an object with paths to the call that returns the original media object and four different types of thumbnail (also media objects).",
            "type": "object",
            "properties": {
                "original": {
                    "$ref": "#/definitions/MediaObjectEmbedded"
                },
                "thumbnail": {
                    "$ref": "#/definitions/MediaObjectEmbedded"
                }
            }
        },
        "SampleMediaObjectEmbedded": {
            "description": "Holds metadata for media objects, i.e. images, video, text or audio files that are the basis of records.",
            "type": "object",
            "properties": {
                "Original": {
                    "type": "string",
                    "default": "uri: /media/569f78d6590b1966cdeb3443?file=true"
                },
                "Tiny": {
                    "type": "string",
                    "default": "uri: /media/569f78de590b1966cdeb3450?file=true"
                },
                "Square": {
                    "type": "string",
                    "default": "uri: /media/569f78de590b1966cdeb3452?file=true"
                },
                "Thumbnail": {
                    "type": "string",
                    "default": "uri: /media/569f78de590b1966cdeb3454?file=true"
                },
                "Medium": {
                    "type": "string",
                    "default": "uri: /media/569f78de590b1966cdeb3456?file=true"
                }
            }
        },
        "SampleInternalRecord": {
            "description": "An individual record description and metadata. The fields exhibition and position are used only for records in exhibitions. This object schema is used for internal search responses (records stored in the WITH database).",
            "type": "object",
            "properties": {
                "resourceType": {
                    "type": "string",
                    "default": "CulturalObject"
                },
                "collectedIn": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SampleExternalCollection"
                    }
                },
                "media": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SampleMediaObjectEmbedded"
                    }
                },
                "descriptiveData": {
                    "$ref": "#/definitions/SampleDescriptiveData"
                },
                "provenance": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SampleProvenance"
                    }
                }
            }
        },
        "SampleEUROPEANARecord": {
            "description": "An individual record description and metadata. The fields exhibition and position are used only for records in exhibitions. This object schema is used for internal search responses (records stored in the WITH database).",
            "type": "object",
            "properties": {
                "provenance": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "provider": {
                                "type": "string",
                                "default": "Europeana"
                            },
                            "resourceId": {
                                "type": "string",
                                "default": "http://ipa.image.ntua.gr:9030/assets/apispecs.json"
                            }
                        }
                    }
                }
            }
        },
        "SampleMINTRecord": {
            "description": "An individual record description and metadata. The fields exhibition and position are used only for records in exhibitions. This object schema is used for internal search responses (records stored in the WITH database).",
            "type": "object",
            "properties": {
                "resourceType": {
                    "type": "string",
                    "default": "CulturalObject"
                },
                "collectedIn": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SampleExternalCollection"
                    }
                },
                "media": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SampleMediaObjectEmbedded"
                    }
                },
                "descriptiveData": {
                    "$ref": "#/definitions/SampleDescriptiveData"
                },
                "provenance": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SampleProvenance"
                    }
                }
            }
        },
        "SampleMEDIARecord": {
            "description": "An individual record description and metadata. The fields exhibition and position are used only for records in exhibitions. This object schema is used for internal search responses (records stored in the WITH database).",
            "type": "object",
            "properties": {
                "resourceType": {
                    "type": "string",
                    "default": "CulturalObject"
                },
                "collectedIn": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SampleExternalCollection"
                    }
                },
                "media": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SampleMediaObjectEmbedded"
                    }
                },
                "descriptiveData": {
                    "$ref": "#/definitions/SampleDescriptiveData"
                },
                "provenance": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SampleProvenance"
                    }
                }
            }
        },
        "SamplePUBLICRecord": {
            "description": "An individual record description and metadata. The fields exhibition and position are used only for records in exhibitions. This object schema is used for internal search responses (records stored in the WITH database).",
            "type": "object",
            "properties": {
                "administrative": {
                    "type": "object",
                    "properties": {
                        "access": {
                            "type": "object",
                            "properties": {
                                "isPublic": {
                                    "type": "boolean",
                                    "default": true
                                },
                                "acl": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "user": {
                                                "type": "string",
                                                "default": "eirini1"
                                            },
                                            "level": {
                                                "type": "string",
                                                "default": "READ"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "descriptiveData": {
                    "type": "object",
                    "properties": {
                        "label": {
                            "type": "object",
                            "properties": {
                                "default": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "provenance": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SampleProvenance"
                    }
                }
            }
        },
        "SampleCollection": {
            "description": "Collection metadata.",
            "type": "object",
            "properties": {
                "resourceType": {
                    "type": "string",
                    "default": "SimpleCollection"
                },
                "descriptiveData": {
                    "$ref": "#/definitions/SampleCollectionDescriptiveData"
                },
                "access": {
                    "$ref": "#/definitions/SampleAccess"
                }
            }
        },
        "SampleExhibition": {
            "description": "Exhibition metadata.",
            "type": "object",
            "properties": {
                "resourceType": {
                    "type": "string",
                    "default": "Exhibition"
                },
                "descriptiveData": {
                    "$ref": "#/definitions/SampleCollectionDescriptiveData"
                },
                "access": {
                    "$ref": "#/definitions/SampleAccess"
                }
            }
        },
        "SampleAccess": {
            "description": "Sample acces object.",
            "type": "object",
            "properties": {
                "isPublic": {
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "SampleExternalCollection": {
            "description": "Metadata related to external collections an object may belong to.",
            "type": "object",
            "properties": {
                "collectionId": {
                    "type": "string",
                    "default": "569f78d6590b1966cdeb3443"
                },
                "position": {
                    "type": "integer",
                    "default": 16
                }
            }
        },
        "SampleExternalCollectionNoId": {
            "description": "Metadata related to external collections an object may belong to.",
            "type": "object",
            "properties": {
                "position": {
                    "type": "integer",
                    "default": 16
                }
            }
        },
        "SampleProvenance": {
            "description": "Holds provenance metadata about a collected resource.",
            "type": "object",
            "properties": {
                "provider": {
                    "type": "string",
                    "default": "Europeana"
                },
                "uri": {
                    "type": "string",
                    "default": "uri@uri//uri"
                },
                "resourceId": {
                    "type": "string",
                    "default": "569f78d6590b1966cdeb3443"
                }
            }
        },
        "SampleCollectionDescriptiveData": {
            "description": "Extends DescriptiveData with fields unique to CollectionObjects.",
            "type": "object",
            "properties": {
                "label": {
                    "type": "object",
                    "properties": {
                        "default": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "default": "label1"
                            }
                        }
                    }
                },
                "description": {
                    "type": "object",
                    "properties": {
                        "default": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "default": "description1"
                            }
                        }
                    }
                }
            }
        },
        "SampleDescriptiveData": {
            "description": "Descriptive metadata vary depending on the type of the collected resource. The basic data structures of all the different types are: ```LiteralType, ResourceType, ResourceOrLiteralType```",
            "type": "object",
            "properties": {
                "label": {
                    "type": "string",
                    "default": {
                        "en": [
                            "label1",
                            "label2"
                        ]
                    }
                },
                "description": {
                    "type": "string",
                    "default": {
                        "en": [
                            "desc1",
                            "desc2"
                        ]
                    }
                },
                "keywords": {
                    "type": "string",
                    "default": {
                        "en": [
                            "keyword1",
                            "keyword1"
                        ]
                    }
                },
                "isShownAt": {
                    "type": "string",
                    "default": {
                        "en": "somewhere"
                    }
                },
                "rdfType": {
                    "type": "string",
                    "default": "type1orSomething"
                },
                "altlabels": {
                    "type": "string",
                    "default": {
                        "en": [
                            "altlabel1",
                            "altlabel1"
                        ]
                    }
                }
            }
        },
        "SampleMultiLiteralOrResource": {
            "description": "Can either be a multiliteral or a resource.",
            "type": "array",
            "items": {
                "$ref": "#/definitions/ResourceOrLiteral"
            }
        },
        "SampleMultiLiteral": {
            "description": "More than one RDF literal types.",
            "type": "array",
            "items": {
                "$ref": "#/definitions/Literal"
            }
        },
        "SampleLiteral": {
            "description": "An RDF literal type.",
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "default": "value"
                }
            }
        },
        "SampleResource": {
            "description": "An RDF resource type.",
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "default": "value"
                }
            }
        },
        "SampleResourceOrLiteral": {
            "description": "Either an RDF literal or a resource.",
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "default": "value"
                }
            }
        }
    }
}