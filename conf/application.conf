# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
application.secret="changeme"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# these are the loggers that we see, contrary to the docs
# overwrite to make them more verbous

logger {
  actors: ERROR
  controllers: ERROR
  db: ERROR
  model: ERROR
}


# mongo connection
#overwrite this in local.conf
mongo {
  host: "localhost"
  port: 27017
  dbname: "with-test"
}

parsers.text.maxLength=300K

# Model Package
db.model="model"  

akka.default-dispatcher.fork-join-executor.pool-size-max = 64
akka.actor.debug.receive = on

session {
# default timeout 1 week
#   timeout: 1000l*86400l*7
# which paths to ignore for login timeouts 
	ignore: "(/assets|/custom|/cache/byUrl)"
# this ones are play framework confs	
	maxAge=7d
# make the cookie readable by app, so it can detect session timeouts
	httpOnly=false
}



apikey {  
  # any path that matches the ignorePattern is excluded from apikey filtering
  # access is possible without matching apikey
  # as well, since its not filtered and there is no key, its not counted
  ignorePattern = "(/assets|/custom|/cache/byUrl)"
  disabled = true
}

#overwrite this correctly in local.conf, we need it for the apikeys

with.origin = "http://localhost:9000"

 elasticsearch {
 # change this in local conf
 	enable: true
    host: "localhost"
    port: 9300
 #and set this in local conf   
    cluster: "needs_local_conf"
    index {
    	name: "with"
    	mapping.resource: "resource.mapping"
    	num_of_shards: 5
    	num_of_replicas: 0
    }
    
# maybe some explanation to parameters is in order
    
    old_index.name:"" 
    alias.name: ""
    searchWithin.fields="label_all^4,description_all^2,keywords_all,altLabels_all"
}



# set this to true in local.conf to test without locks
locks.disabled = false

# paremeters for metrics
metrics {

    csv.directory: ""
    graphite.host: "collab.image.ntua.gr"
    graphite.port: 2003
    graphite.prefix: "dummy-withLocal"
    
}
    
measures {
	
	mediaController {
    	storeMedia.time: false
	    makeThumbs.time: false
	}
}    
