# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
#GET     /                          controllers.Application.index()
GET      /                                         controllers.Default.redirect(to="assets/index.html")

GET      /notifications/socket                     controllers.NotificationController.socket()
PUT      /notifications/accept/:notificationId     controllers.NotificationController.respondToRequest(notificationId, accept: Boolean ?= true)
PUT      /notifications/reject/:notificationId     controllers.NotificationController.respondToRequest(notificationId, accept: Boolean ?= false)
GET      /notifications/myNotifications            controllers.NotificationController.getUserNotifications()
PUT      /notifications/read                       controllers.NotificationController.readNotifications()
POST     /notifications/send                       controllers.NotificationController.sendMessage(receiverId)

POST     /api/advancedsearch        controllers.SearchController.searchwithfilter()
POST     /api/initialfilters        controllers.SearchController.getfilters()  
GET     /api/searchsources        controllers.SearchController.searchSources()
POST     /api/search            	controllers.SearchController.search()

#Autocomplete
GET		/api/autocompleteExt		controllers.AutocompleteController.autocompleteExt(term:java.lang.String,limit:Integer,source:java.util.List[java.lang.String])

# Map static resources from the /public folder to the /assets URL path
GET 	/assets/headers.js						controllers.FilterUtils.withAjaxScript
GET     /assets/*file               			controllers.Assets.at(path="/public", file)
GET 	/custom/:customName					    controllers.CustomAssets.redirect(customName)
GET 	/custom/:customName/					controllers.CustomAssets.redirect(customName)
GET 	/custom/:customName/*file				controllers.CustomAssets.getFile(customName:String, file:String)

PUT		/record/contextData			            controllers.RecordResourceController.editContextData()
GET		/record/:id							    controllers.RecordResourceController.getRecordResource(id, format: play.libs.F.Option[String])
PUT		/record/:id								controllers.RecordResourceController.editRecordResource(id)

# Collection Controller
GET 	 /collection/list 						controllers.CollectionObjectController.list(directlyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], recursivelyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], creator: play.libs.F.Option[String], isPublic: play.libs.F.Option[java.lang.Boolean], isExhibition: play.libs.F.Option[java.lang.Boolean], collectionHits:Boolean ?= false, offset: Integer ?=0, count: Integer ?=10)
GET 	 /collection/listShared					controllers.CollectionObjectController.listShared(direct: Boolean ?= true, directlyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], recursivelyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], isExhibition: play.libs.F.Option[java.lang.Boolean], collectionHits:Boolean ?= false, offset: Integer ?=0, count: Integer ?=10)
GET 	 /collection/countMyAndShared			controllers.CollectionObjectController.countMyAndShared()
GET 	 /collection/featured					controllers.CollectionObjectController.getFeatured(groupOrUserName: String, isExhibition: play.libs.F.Option[java.lang.Boolean], offset: Integer ?=0, countPerType: Integer ?=10)
GET		 /collection/favorites					controllers.RecordResourceController.getFavorites()
GET      /collection/:id/listUsers				controllers.CollectionObjectController.listUsersWithRights(id)
GET      /collection/:id/list		   	        controllers.CollectionObjectController.listRecordResources(id, format: String ?="noContent", start: Integer ?=0, count: Integer ?=10)
GET		 /collection/favoriteCollection			controllers.CollectionObjectController.getFavoriteCollection()

POST     /collection/liked			            controllers.WithResourceController.addToFavorites()
POST     /collection/:id/addRecord              controllers.WithResourceController.addRecordToCollection(id, position: play.libs.F.Option[Integer], noDouble: Boolean ?= false)
POST 	/collection/:id/addRecords				controllers.WithResourceController.addRecordsToCollection(id)

DELETE   /collection/:id/removeRecord           controllers.WithResourceController.removeRecordFromCollection(id, recId, position: play.libs.F.Option[Integer], all: Boolean ?= false)
PUT		 /collection/:id/moveRecord				controllers.WithResourceController.moveRecordInCollection(id, recordId, oldPosition: Int, newPosition: Int)
DELETE   /collection/unliked/:recId			    controllers.WithResourceController.removeFromFavorites(recId)

POST     /collection		                    controllers.CollectionObjectController.createCollectionObject(collectionType: String ?= "SimpleCollection")
POST     /collection/importSearch		        controllers.CollectionObjectController.importSearch()
GET     /collection/importEuropeanaCollection	controllers.CollectionObjectController.createAndFillEuropeanaCollection(id: String, limit:Integer ?=-1)
GET	     /collection/:id 	        			controllers.CollectionObjectController.getCollectionObject(id)
PUT		 /collection/:id 						controllers.CollectionObjectController.editCollectionObject(id)
DELETE   /collection/:id	                    controllers.CollectionObjectController.deleteCollectionObject(id)

# Exhibition Controller
#POST     /exhibition/create                     controllers.CollectionObjectController.createCollectionObject(collectionType: String ?= "Exhibition")

#GET	  /record/similar/:externalId			controllers.RecordController.getSimilar(externalId)

#Group Manager
POST	/group/create							controllers.GroupManager.createGroup(adminId: String ?=null, adminUsername: String ?=null, groupType: String ?="UserGroup")
POST	/organization/create					controllers.GroupManager.createGroup(adminId: String ?=null, adminUsername: String ?=null, groupType: String ?="Organization")
POST	/project/create							controllers.GroupManager.createGroup(adminId: String ?=null, adminUsername: String ?=null, groupType: String ?="Project")
GET      /group/findByGroupName                 controllers.GroupManager.findByGroupName(name, collectionId)
GET		/group/descendantGroups/:groupId		controllers.GroupManager.getDescendantGroups(groupId, groupType: String  ?="All", direct: Boolean ?=true, collectionHits:Boolean ?= false)
GET		/group/descendantOrganizations/:groupId	controllers.GroupManager.getDescendantGroups(groupId, groupType: String  ?="Organization", direct: Boolean ?=true, collectionHits:Boolean ?= false)
GET		/group/descendantProjects/:groupId		controllers.GroupManager.getDescendantGroups(groupId, groupType: String  ?="Project", direct: Boolean ?=true, collectionHits:Boolean ?= false)
GET		/group/list								controllers.GroupManager.listUserGroups(groupType: String ?="Project", offset: Integer ?=0, count: Integer ?=10)
PUT      /group/:id                             controllers.GroupManager.editGroup(id)
DELETE   /group/:id                             controllers.GroupManager.deleteGroup(id)
GET      /group/:id                             controllers.GroupManager.getGroup(id)
PUT      /group/addUserOrGroup/:groupId         controllers.UserAndGroupManager.addUserOrGroupToGroup(id: String ?=null, groupId)
DELETE   /group/removeUserOrGroup/:groupId      controllers.UserAndGroupManager.removeUserOrGroupFromGroup(id: String ?=null, groupId)
PUT      /group/join/:groupId                   controllers.UserAndGroupManager.joinGroup(groupId)
PUT      /group/leave/:groupId                  controllers.UserAndGroupManager.leaveGroup(groupId)
GET		/group/membersInfo/:groupId 			controllers.GroupManager.getGroupUsersInfo(groupId, category: String ?="both")

# Rights Controller
GET      /rights/:colId/:right                  controllers.RightsController.editCollectionRights(colId, right, username: String ?=null, membersDowngrade: Boolean ?= false)
GET      /rights/:colId							controllers.RightsController.editCollectionPublicity(colId, isPublic: Boolean, membersDowngrade: Boolean ?= false)

# Media Controller
POST	/media/create							controllers.MediaController.createMedia(file: Boolean ?= true)
GET		/media/byUrl							controllers.MediaController.getMediaByUrl(url, version: String ?= "Original")
GET 	/media/:id								controllers.MediaController.getMetadataOrFile(id, file: Boolean ?=true)
POST 	/media/:id 								controllers.MediaController.editMetadataOrFile(id, file: Boolean ?=false)
DELETE 	/media/:id								controllers.MediaController.deleteMedia(id)

# User Manager Controller
POST	/user/register						    controllers.UserManager.register()
POST	/user/login							    controllers.UserManager.login()
GET		/user/logout						    controllers.UserManager.logout()
GET		/user/emailAvailable	                controllers.UserManager.emailAvailable(email:java.lang.String)
GET		/user/token				                controllers.UserManager.getToken()
GET 	/user/loginWithToken	                controllers.UserManager.loginWithToken( token: java.lang.String )
# both users and groups
GET      /user/findByUserOrGroupNameOrEmail        controllers.UserAndGroupManager.findByUserOrGroupNameOrEmail(userOrGroupNameOrEmail: String, collectionId ?= null)
GET      /user/listNames                           controllers.UserAndGroupManager.listNames(prefix:java.lang.String ?= "", onlyParents: Boolean ?= false, specifyCategory: Integer ?= 0)
GET      /user/:id/photo                           controllers.UserAndGroupManager.getUserOrGroupThumbnail(id)
GET      /user/:id                                 controllers.UserManager.getUser(id)
PUT      /user/:id                                 controllers.UserManager.editUser(id)
DELETE   /user/:id                                 controllers.UserManager.deleteUser(id)
GET      /user/resetPassword/:emailOrUserName      controllers.UserManager.resetPassword(emailOrUserName: String)
POST     /user/changePassword                      controllers.UserManager.changePassword()
GET      /user/apikey/create                       controllers.UserManager.apikey()

# trigger reindex (for development / admin )

#Reindex Controller
GET	/api/chind										controllers.ReindexController.changeIndice(newIndice: String)
GET	/api/mkconst									controllers.ReindexController.makeConsistent()
GET	/api/idxres										controllers.ReindexController.reindexAllResources()
GET	/api/idxthes									controllers.ReindexController.reindexAllThesaurus()
