# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
#GET     /                          controllers.Application.index()
OPTIONS	 /*path									   controllers.PreFlight.checkPreFlight(path)
GET      /                                         controllers.Default.redirect(to="assets/index.html")

GET      /notifications/socket                     controllers.NotificationController.socket()
PUT      /notifications/accept/:notificationId     controllers.NotificationController.respondToRequest(notificationId, accept: Boolean ?= true)
PUT      /notifications/reject/:notificationId     controllers.NotificationController.respondToRequest(notificationId, accept: Boolean ?= false)
GET      /notifications/myNotifications            controllers.NotificationController.getUserNotifications()
PUT      /notifications/read                       controllers.NotificationController.readNotifications()
POST     /notifications/send                       controllers.NotificationController.sendMessage(receiverId)


GET     /api/updatemediaquality      controllers.CollectionObjectController.updateMediaQuality()


POST     /api/advancedsearch        controllers.SearchController.searchwithfilter()
POST     /api/relatedsearch        controllers.SearchController.relatedSearch()
GET     /api/advancedsearchGET      controllers.SearchController.searchwithfilterGET(q: sources.core.CommonQuery)
GET     /api/getrightsbycategory        controllers.SearchController.getRightsByCategory(category: String)
GET     /api/initialfilters        controllers.SearchController.getfilters(source: String, days: Integer ?=30)
GET     /api/clearfilters        controllers.SearchController.clearFilters()
GET      /api/searchsources        	controllers.SearchController.searchSources()
POST     /api/mergefilters         	controllers.SearchController.mergeFilters()
POST     /api/search            	controllers.SearchController.search()
POST 	 /api/search2				controllers.SearchController.search2()
GET      /api/annotationsSearch    	controllers.AnnotationController.searchRecordsOfGroup(groupId: String, term: String)
GET		/api/searchMyCollections	controllers.CollectionObjectController.searchMyCollections(term: String ?= "*", isShared: Boolean ?= false, isExhibition: Boolean ?= false, offset : Integer ?= 0, count: Integer ?= 10)
GET		/api/searchMyExhibitions	controllers.CollectionObjectController.searchMyExhibitions(term: String ?= "*", isShared: Boolean ?= false, offset : Integer ?= 0, count: Integer ?= 10)
GET 	/api/searchCollection/:id   controllers.CollectionObjectController.searchCollection(term: String ?= "*", id, offset : Integer ?= 0, count: Integer ?= 10)
GET		/api/searchPublicCollections controllers.CollectionObjectController.searchPublicCollections(term: String ?= "*", isExhibition: Boolean ?= false, offset : Integer ?= 0, count: Integer ?= 10, spaceId: play.libs.F.Option[String])

#Autocomplete
GET		/api/autocompleteExt		controllers.AutocompleteController.autocompleteExt(term:java.lang.String,limit:Integer,source:java.util.List[java.lang.String])

# Map static resources from the /public folder to the /assets URL path
GET 	/assets/headers.js						filters.FilterUtils.withAjaxScript
GET     /swagger                    			controllers.ViewController.swagger()
GET     /assets/*file               			controllers.Assets.at(path="/public", file)

GET		/code									controllers.CodeController.jarList()
GET		/code/*file								controllers.CodeController.downloadJar( file )

GET 	/custom/:customName					    controllers.CustomAssets.redirect(customName)
GET 	/custom/:customName/					controllers.CustomAssets.redirect(customName)
GET 	/custom/:customName/*file				controllers.CustomAssets.getFile(customName:String, file:String)


GET     /record/updateAllRights					controllers.RecordResourceController.updateAllRights()
GET     /record/updateRights					controllers.RecordResourceController.updateRights(id: String)
GET     /record/randomRecords					controllers.RecordResourceController.getRandomRecords(groupId: String, batchCount: Integer)
GET		/record/randomAnnotatedRecords			controllers.RecordResourceController.getRandomAnnotatedRecords( groupId: String, count: Integer, minimum:Integer ?= 3 )
GET		/record/randomRecordsFromCollections	controllers.RecordResourceController.getRandomRecordsFromCollections( collectionIds: java.util.List[String], count: Integer, hideMyAnnotated:Boolean ?= false)
GET		/record/annotationCount					controllers.AnnotationController.getAnnotationCount(groupId: String)
GET		/record/deepAnnotationCount				controllers.AnnotationController.getDeepAnnotationCount(groupId: String)
POST 	/record/annotation						controllers.AnnotationController.addAnnotation()
PUT		/record/contextData			            controllers.RecordResourceController.editContextData(collectionId)
GET     /record/multiple						controllers.RecordResourceController.getMultipleRecordResources( id: java.util.List[String], profile: String ?="MEDIUM", locale: play.libs.F.Option[java.lang.String])
GET     /record/annotationLabel					controllers.RecordResourceController.getRecordIdsByAnnLabel( label: String ?= "", generator: java.util.List[String], order: String?="upvoted")
GET		/record/:id							    controllers.RecordResourceController.getRecordResource(id, format: play.libs.F.Option[String], profile: String ?="MEDIUM", locale: play.libs.F.Option[java.lang.String])
PUT		/record/:id								controllers.RecordResourceController.editRecordResource(id)

GET		/annotation/importAutomatic				controllers.AnnotationController.importAutomaticColourAnnotations()
GET		/annotation/export						controllers.AnnotationController.exportAnnotationsForEuropeanaApi(project: String ?= "CrowdHeritage", campaignName: String, maxRanking: Integer ?= -1, mark: Boolean ?= false)
GET		/annotation/exportCampaignAnnotations	controllers.AnnotationController.exportCampaignAnnotations(campaignName: String)
GET 	/annotation/leaderboard					controllers.AnnotationController.leaderboard( groupId: String )
GET		/annotation/approveMultiple				controllers.AnnotationController.approveMultipleAnnotations( id: java.util.List[String])
GET		/annotation/rejectMultiple				controllers.AnnotationController.rejectMultipleAnnotations( id: java.util.List[String])
GET		/annotation/unscoreMultiple				controllers.AnnotationController.unscoreMultipleAnnotations( id: java.util.List[String])
GET		/annotation/:id							controllers.AnnotationController.getAnnotation(id)
DELETE	/annotation/:id							controllers.AnnotationController.deleteAnnotation(id)
GET		/annotation/:id/approve					controllers.AnnotationController.approveAnnotation(id)
POST	/annotation/:id/approveObj				controllers.AnnotationController.approveAnnotationObject(id)
GET		/annotation/:id/reject					controllers.AnnotationController.rejectAnnotation(id)
POST	/annotation/:id/rejectObj				controllers.AnnotationController.rejectAnnotationObject(id)
GET		/annotation/:id/unscore					controllers.AnnotationController.unscoreAnnotation(id)
GET		/annotation/:id/unscoreObj				controllers.AnnotationController.unscoreAnnotationObject(id)
GET     /annotation/:id/markForPublish          controllers.AnnotationController.markForPublish(id, publish: Boolean ?= true)

# Collection Controller
#GET 	 /collection/list 						controllers.CollectionObjectController.list(directlyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], recursivelyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], creator: play.libs.F.Option[String], isPublic: play.libs.F.Option[java.lang.Boolean], isExhibition: play.libs.F.Option[java.lang.Boolean], collectionHits:Boolean ?= false, offset: Integer ?=0, count: Integer ?=10)
GET      /collection/list						controllers.CollectionObjectController.list(directlyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], creator: play.libs.F.Option[String],  isExhibition: play.libs.F.Option[java.lang.Boolean], collectionHits:Boolean ?= false, offset: Integer ?=0, count: Integer ?=10, profile: String ?="BASIC", locale: play.libs.F.Option[java.lang.String], sortBy: String ?= "Date")
#GET	  /collection/listExhibitions			controllers.CollectionObjectController.listExhibitions(directlyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], creator: play.libs.F.Option[String], collectionHits:Boolean ?= false, offset: Integer ?=0, count: Integer ?=10, profile: String ?="BASIC", locale: play.libs.F.Option[java.lang.String])
GET 	 /collection/listPublic 				controllers.CollectionObjectController.listPublic(directlyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], creator: play.libs.F.Option[String], isExhibition: play.libs.F.Option[java.lang.Boolean], collectionHits:Boolean ?= false, offset: Integer ?=0, count: Integer ?=10, profile: String ?="BASIC", locale: play.libs.F.Option[java.lang.String])
#GET      /collection/listPublicCollections		controllers.CollectionObjectController.listPublicCollections(directlyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], creator: play.libs.F.Option[String],collectionHits:Boolean ?= false, offset: Integer ?=0, count: Integer ?=10, profile: String ?="BASIC", locale: play.libs.F.Option[java.lang.String])
#GET      /collection/listPublicExhibitions		controllers.CollectionObjectController.listPublicCollections(directlyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], creator: play.libs.F.Option[String],collectionHits:Boolean ?= false, offset: Integer ?=0, count: Integer ?=10, profile: String ?="BASIC", locale: play.libs.F.Option[java.lang.String])
#GET 	 /collection/listShared					controllers.CollectionObjectController.listShared(direct: Boolean ?= true, directlyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], recursivelyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], isExhibition: play.libs.F.Option[java.lang.Boolean], collectionHits:Boolean ?= false, offset: Integer ?=0, count: Integer ?=10)
GET 	 /collection/listShared					controllers.CollectionObjectController.listShared(direct: Boolean ?= true, directlyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], isExhibition: play.libs.F.Option[java.lang.Boolean], collectionHits:Boolean ?= false, offset: Integer ?=0, count: Integer ?=10, profile: String ?="BASIC", locale: play.libs.F.Option[java.lang.String], sortBy: String ?= "Date")
#GET      /collection/listSharedCollections		controllers.CollectionObjectController.listShared(direct: Boolean ?= true, directlyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], collectionHits:Boolean ?= false, offset: Integer ?=0, count: Integer ?=10, profile: String ?="BASIC", locale: play.libs.F.Option[java.lang.String])
#GET      /collection/listSharedExhibitions		controllers.CollectionObjectController.listShared(direct: Boolean ?= true, directlyAccessedByUserOrGroup: play.libs.F.Option[controllers.parameterTypes.MyPlayList], collectionHits:Boolean ?= false, offset: Integer ?=0, count: Integer ?=10, profile: String ?="BASIC", locale: play.libs.F.Option[java.lang.String])

GET 	 /collection/countMyAndShared			controllers.CollectionObjectController.countMyAndShared()
GET 	 /collection/featured					controllers.CollectionObjectController.getFeatured(groupOrUserName: String, isExhibition: play.libs.F.Option[java.lang.Boolean], offset: Integer ?=0, countPerType: Integer ?=10, profile: String ?="BASIC", locale: play.libs.F.Option[java.lang.String])
GET		 /collection/favorites					controllers.RecordResourceController.getFavorites()
GET      /collection/:id/listUsers				controllers.CollectionObjectController.listUsersWithRights(id)
GET      /collection/:id/list		   	        controllers.CollectionObjectController.listRecordResources(id, format: String ?="noContent", start: Integer ?=0, count: Integer ?=10,  profile: String ?="MEDIUM", locale: play.libs.F.Option[java.lang.String], sortingCriteria: play.libs.F.Option[java.lang.String], hideMyAnnotated:Boolean ?= false)
GET		 /collection/favoriteCollection			controllers.CollectionObjectController.getFavoriteCollection(profile: String ?="BASIC", locale: play.libs.F.Option[java.lang.String])
PUT		 /collection/sort/:id					controllers.CollectionObjectController.sortCollectionObject(id)

POST     /collection/liked			            controllers.WithResourceController.addToFavorites()
POST     /collection/:id/addRecord              controllers.WithResourceController.addRecordToCollection(id, position: play.libs.F.Option[Integer], noDouble: Boolean ?= false)
POST 	/collection/:id/addRecords				controllers.WithResourceController.addRecordsToCollection(id, noDouble: Boolean ?= false)

DELETE   /collection/:id/removeRecord           controllers.WithResourceController.removeRecordFromCollection(id, recId, position: play.libs.F.Option[Integer], all: Boolean ?= false)
PUT		 /collection/:id/moveRecord				controllers.WithResourceController.moveRecordInCollection(id, recordId, oldPosition: Int, newPosition: Int)
POST     /collection/unliked    			    controllers.WithResourceController.removeFromFavorites()

POST     /collection		                    controllers.CollectionObjectController.createCollectionObject()
POST     /collection/importSearch		        controllers.CollectionObjectController.importSearch()
POST     /collection/importGallery              controllers.CollectionObjectController.importGallery(userGalleryId: String, collectionName: String)
POST     /collection/importItems            controllers.CollectionObjectController.importItemsToCollection()
POST     /collection/uploadCollection		    controllers.CollectionObjectController.uploadCollection()
POST     /collection/importIDs 					controllers.CollectionObjectController.importIDs(cname, source, ids)
GET     /collection/importEuropeanaCollection	controllers.CollectionObjectController.createAndFillEuropeanaCollection(id: String, limit:Integer ?= 100)
GET     /collection/importOmeka					controllers.CollectionObjectController.importOmeka(colid?=".*")
POST     /collection/importExhibition 					controllers.CollectionObjectController.importExhibition(source)

GET      /collection/exportToOWL 			    controllers.CollectionObjectController.exportCollectionObjectToOWL(cname)
GET      /collection/update 			    	controllers.CollectionObjectController.updateCollectionObject(collectionId: String)

GET      /collection/multiple                   controllers.CollectionObjectController.getMultipleCollectionObjects( id: java.util.List[String],profile: String ?="MEDIUM", locale: play.libs.F.Option[java.lang.String], filterForLocale: Boolean ?= true)
#GET      /collection/multipleWithAllLangs       controllers.CollectionObjectController.getMultipleCollectionObjectsAllLanguages( id: java.util.List[String],profile: String ?="MEDIUM")
GET	     /collection/:id 	        			controllers.CollectionObjectController.getCollectionObject(id, profile: String ?="MEDIUM", locale: play.libs.F.Option[java.lang.String], filterForLocale: Boolean ?= true)
PUT		 /collection/:id 						controllers.CollectionObjectController.editCollectionObject(id)
DELETE   /collection/:id	                    controllers.CollectionObjectController.deleteCollectionObject(id)

POST	/collection/:id/annotation						controllers.CollectionObjectController.addAnnotation(id)
# Exhibition Controller
POST	 /exhibition/:id/addBackgroundImg		controllers.ExhibitionObjectController.addBackgroundImg(id)

#Group Manager
POST	/group/create							controllers.GroupManager.createGroup(adminId: String ?=null, adminUsername: String ?=null, groupType: String ?="UserGroup")
POST	/organization/create					controllers.GroupManager.createGroup(adminId: String ?=null, adminUsername: String ?=null, groupType: String ?="Organization")
POST	/project/create							controllers.GroupManager.createGroup(adminId: String ?=null, adminUsername: String ?=null, groupType: String ?="Project")
GET     /group/findByGroupName                  controllers.GroupManager.findByGroupName(name, collectionId: String ?= null)
GET		/group/descendantGroups/:groupId		controllers.GroupManager.getDescendantGroups(groupId, groupType: String  ?="All", direct: Boolean ?=true, collectionHits:Boolean ?= false)
GET		/group/descendantOrganizations/:groupId	controllers.GroupManager.getDescendantGroups(groupId, groupType: String  ?="Organization", direct: Boolean ?=true, collectionHits:Boolean ?= false)
GET		/group/descendantProjects/:groupId		controllers.GroupManager.getDescendantGroups(groupId, groupType: String  ?="Project", direct: Boolean ?=true, collectionHits:Boolean ?= false)
GET		/group/list								controllers.GroupManager.listUserGroups(groupType: String ?="All", offset: Integer ?=0, count: Integer ?=10, belongsOnly: Boolean ?=false, prefix: String ?="*")

# Manager the WITH space (mainly for the UI component) editable only for SuperUsers
GET		/group/with								controllers.GroupManager.getWithSpace()
PUT		/group/with								controllers.GroupManager.editWithSpace()

# manage UI settings
GET		 /group/:groupId/uiSettings				controllers.GroupManager.getUiSettings( groupId, key: String ?= null )
PUT		/group/:groupId/uiSettings				controllers.GroupManager.updateUiSettings( groupId,  key:String )
DELETE	/group/:groupId/uiSettings				controllers.GroupManager.deleteUiSettings( groupId, key:String )

GET		 /group/space							controllers.GroupManager.getSpace(name)
PUT      /group/:id                             controllers.GroupManager.editGroup(id)
DELETE   /group/:id                             controllers.GroupManager.deleteGroup(id)
GET      /group/:id                             controllers.GroupManager.getGroup(id)
PUT      /group/addUserOrGroup/:groupId         controllers.UserAndGroupManager.addUserOrGroupToGroup(id: String ?=null, groupId)
DELETE   /group/removeUserOrGroup/:groupId      controllers.UserAndGroupManager.removeUserOrGroupFromGroup(id: String ?=null, groupId)
PUT      /group/join/:groupId                   controllers.UserAndGroupManager.joinGroup(groupId)
PUT      /group/leave/:groupId                  controllers.UserAndGroupManager.leaveGroup(groupId)
GET		/group/membersInfo/:groupId 			controllers.GroupManager.getGroupUsersInfo(groupId, category: String ?="both")
PUT      /group/admin/:groupId       			controllers.UserAndGroupManager.addAdminToGroup(id: String ?=null, groupId)
DELETE   /group/admin/:groupId     			    controllers.UserAndGroupManager.removeAdminFromGroup(id: String ?=null, groupId)
POST	/group/:groupId/addFeatured				controllers.GroupManager.addFeatured(groupId)
POST 	/group/:groupId/removeFeatured	   	    controllers.GroupManager.removeFeatured(groupId)

# Rights Controller
GET      /rights/:colId/:right                  controllers.RightsController.editCollectionRights(colId, right, username: String ?=null, membersDowngrade: Boolean ?= false)
GET      /rights/:colId							controllers.RightsController.editCollectionPublicity(colId, isPublic: Boolean, membersDowngrade: Boolean ?= false)

# Media Controller
GET		/media/downloadByCollection				controllers.MediaController.downloadCollectionMedia(collectionId, version : String ?= "all")
POST	/media/create							controllers.MediaController.createMedia(file: Boolean ?= true)
GET		/media/byUrl							controllers.MediaController.getMediaByUrl(url, version: String ?= "Original")
GET 	/media/:id								controllers.MediaController.getMetadataOrFile(id, file: Boolean ?=true)
POST 	/media/:id 								controllers.MediaController.editMetadataOrFile(id, file: Boolean ?=false)
DELETE  /media/orphan							controllers.MediaController.deleteOrphanMedia()
DELETE 	/media/:id								controllers.MediaController.deleteMedia(id)

# User Manager Controller
GET		/user/byUsername						controllers.UserManager.getUserByUsername(username)
GET     /user/me                                controllers.UserManager.getMyUser()
POST	/user/register						    controllers.UserManager.register()
POST	/user/login							    controllers.UserManager.login()
POST	/user/facebookLogin						controllers.UserManager.facebookLogin()
POST	/user/googleLogin						controllers.UserManager.googleLogin()
GET		/user/logout						    controllers.UserManager.logout()
GET		/user/emailAvailable	                controllers.UserManager.emailAvailable(email:java.lang.String)
GET		/user/token				                controllers.UserManager.getToken()
GET 	/user/loginWithToken	                controllers.UserManager.loginWithToken( token: java.lang.String )
GET     /user/points                            controllers.CampaignController.getUserPoints(userId: String ?= null, pointType:String ?=null)
GET		/user/annotatedRecords					controllers.AnnotationController.getUserAnnotatedRecords(userId: String ?= null, project: String ?= null, campaign: String ?= null, offset: Integer ?=0, count: Integer ?=10)
GET		/user/annotations						controllers.AnnotationController.getUserAnnotations(userId: String ?= null, project: String ?= null, campaign: String ?= null, offset: Integer ?=0, count: Integer ?=10)

# both users and groups
GET      /user/findByUserOrGroupNameOrEmail        controllers.UserAndGroupManager.findByUserOrGroupNameOrEmail(userOrGroupNameOrEmail: String, collectionId ?= null)
GET      /user/listNames                           controllers.UserAndGroupManager.listNames(prefix:java.lang.String ?= "", onlyParents: Boolean ?= false, forUsers: Boolean ?= true, forGroupType: play.libs.F.Option[String])
GET      /user/:id/photo                           controllers.UserAndGroupManager.getUserOrGroupThumbnail(id)
GET      /user/:id                                 controllers.UserManager.getUser(id)
PUT      /user/:id                                 controllers.UserManager.editUser(id)
DELETE   /user/:id                                 controllers.UserManager.deleteUser(id)
GET      /user/resetPassword/:emailOrUserName      controllers.UserManager.resetPassword(emailOrUserName: String)
POST     /user/changePassword                      controllers.UserManager.changePassword()
GET      /user/apikey/create                       controllers.UserManager.apikey()


#Reindex Controller
GET	/api/chind										controllers.ReindexController.changeIndice(newIndice: String)
GET	/api/mkconst									controllers.ReindexController.makeConsistent()
GET	/api/idxres										controllers.ReindexController.reindexAllResources()
GET	/api/idxcols									controllers.ReindexController.reindexAllCollections()
GET	/api/idxthes									controllers.ReindexController.reindexAllThesaurus()
GET	/api/idxann										controllers.ReindexController.reindexAllAnnotations()
GET /api/purge										controllers.ReindexController.purgeElastic()
GET /api/collection/:id/reindex							controllers.ReindexController.reindexCollection(id)

#Thesaurus management
POST	/thesaurus/addTerm	        			    controllers.ThesaurusController.addThesaurusTerm()
POST    /thesaurus/createEmptyThesaurus             controllers.ThesaurusController.createEmptyThesaurus(name: String, version: String)
DELETE  /thesaurus/deleteThesaurus/:name	        controllers.ThesaurusController.deleteThesaurus(name)
GET 	/thesaurus/getTerm		   					controllers.ThesaurusController.getThesaurusTerm(uri: String)
GET 	/thesaurus/listVocabularies		   				controllers.ThesaurusController.listVocabularies()
GET 	/thesaurus/listAnnotators		   				controllers.ThesaurusController.listAnnotators()
GET 	/thesaurus/suggestions						controllers.ThesaurusController.getSuggestions(word: String, namespaces: String ?= "", campaignId: String ?= null, geotagging: Boolean ?= false, language : String ?= "all")

#Thesaurus gui
POST	/collection/:id/facets 	        			controllers.CollectionIndexController.getCollectionFacets(id)
POST	/collection/:id/selectionlist		   			controllers.CollectionObjectController.facetedListRecordResources(id, format: String ?="noContent", start: Integer ?=0, count: Integer ?=10, profile: String ?="MEDIUM", locale: play.libs.F.Option[java.lang.String])
GET 	/collection/:id/similarlist		   			controllers.CollectionObjectController.similarListRecordResources(id, itemid: java.lang.String, format: String ?="noContent", start: Integer ?=0, count: Integer ?=10, profile: String ?="MEDIUM", locale: play.libs.F.Option[java.lang.String])
#POST	/collection/:id/keywords 	        			controllers.CollectionIndexController.getCollectionKeywords(id)
#GET	/collection/:id/annotationlist				controllers.CollectionIndexController.getCollectionAnnotations(id)

GET     /source/dbpedia/lookup						controllers.DBPediaController.dbpediaLookup(type: java.lang.String, query: java.lang.String, start: Integer ?=0, count: Integer ?=10)

#Annotations
GET		/record/:id/listAnnotations				    controllers.RecordResourceController.getAnnotations(id, motivation: String ?="Tagging", generator: String ?="")
POST	/record/:id/annotate						controllers.RecordResourceController.annotateRecord(id)
GET		/record/:id/deleteRejectedAnnotations		controllers.RecordResourceController.deleteRejectedAnnotations(id)
POST	/collection/:id/annotate					controllers.CollectionObjectController.annotateCollection(id)
POST	/group/:id/annotate							controllers.CollectionObjectController.annotateCollectionsByGroupId(id)

POST    /annotation/annotateRequestResult			controllers.AnnotationRequestController.newAnnotations()	
GET		/collection/api/removeIdsOfDeletedRecords	controllers.WithResourceController.removeIdsOfDeletedRecords()		
GET	    /collection/:id/annotations 	        	controllers.CollectionObjectController.getAnnotations(id)

GET	    /record/:id/nerd	    					controllers.RecordResourceController.nerdRecord(id)
GET 	/collection/:id/nerd						controllers.CollectionObjectController.nerdCollection(id)

#GET	     /collection/:id/annotationSummary 	        			controllers.CollectionObjectController.getAnnotationSummary(id, mode: String ?="FLAT")

#Campaign Controller
GET		/campaign/count								controllers.CampaignController.getCampaignCount(group: String ?= "", project: String ?= "CrowdHeritage", state: String ?= "all")
GET		/campaign/getCampaign						controllers.CampaignController.getCampaign(campaignId: String)
DELETE	/campaign/:id								controllers.CampaignController.deleteCampaign(id)
GET		/campaign/reset/:id							controllers.CampaignController.resetCampaign(id)
PUT		/campaign/:id								controllers.CampaignController.editCampaign(id)
GET		/campaign/getCampaignByName					controllers.CampaignController.getCampaignByName(cname: String)
GET		/campaign/campaigns							controllers.CampaignController.getCampaigns(group: String ?= "", project: String ?= "CrowdHeritage", state: String ?="all", sortBy: String ?= "Date_desc", offset: Integer ?=0, count: Integer ?=10)
GET		/campaign/incUserPoints						controllers.CampaignController.incUserPoints(campaignId: String, userId: String, annotationType: String)
GET		/campaign/decUserPoints						controllers.CampaignController.decUserPoints(campaignId: String, userId: String, annotationType: String)
POST	/campaign/createCampaign					controllers.CampaignController.createCampaign()
POST	/campaign/createEmptyCampaign			    controllers.CampaignController.createEmptyCampaign(campaignUserName:String)
GET		/campaign/userCampaigns						controllers.CampaignController.getUserCampaigns(offset: Integer ?=0, count: Integer ?=10)
GET		/campaign/readCampaignTerms					controllers.CampaignController.readCampaignTerms(cname: String)
GET		/campaign/popularAnnotations				controllers.CampaignController.getPopularAnnotations(campaignName: String, term : String ?= "", offset : Integer ?= 0, count: Integer ?= 10)
GET     /campaign/updateKarma/:id                   controllers.CampaignController.updateKarma(id)
GET     /campaign/contributors		                controllers.CampaignController.getContributors(cname: String)
POST    /campaign/initiateValidation                controllers.CampaignController.initiateValidation(campaignId: String, allowRejected: Boolean ?= false, minScore: Integer ?= 1)
GET     /campaign/statistics                        controllers.CampaignController.campaignStatistics(cname: String)