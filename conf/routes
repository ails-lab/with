# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index()

POST     /api/search                controllers.SearchController.search()
POST     /api/advancedsearch        controllers.SearchController.searchwithfilter()
GET      /api/testsearch            controllers.SearchController.testsearch()
POST     /api/testsearch            controllers.SearchController.posttestsearch()

#Autocomplete
GET		/api/autocompleteExt		controllers.AutocompleteController.autocompleteExt(term:java.lang.String,limit:Integer,source:java.util.List[java.lang.String])

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               			controllers.Assets.at(path="/public", file)

# Collection Controller (tested except some methods)
GET 	 /collection/list						controllers.CollectionController.list(filterByUser ?= null, filterByUserId ?= null , filterByEmail ?= null, access: String ?="owned", offset: Integer ?=0, count: Integer ?=10)
GET 	 /collection/listShared					controllers.CollectionController.listShared(filterByUser ?= null, filterByUserId ?= null , filterByEmail ?= null, offset: Integer ?=0, count: Integer ?=10)
POST     /collection/create                     controllers.CollectionController.createCollection()
POST     /collection/listByUser			        controllers.CollectionController.listFirstRecordsOfUserCollections()
POST     /collection/:id/addRecord              controllers.CollectionController.addRecordToCollection(id)
DELETE   /collection/:id/removeRecord           controllers.CollectionController.removeRecordFromCollection(id, recId, version: Integer ?=-1)
GET      /collection/:id/list		   	        controllers.CollectionController.listCollectionRecords(id, format: String ?="default", start: Integer ?=0, count: Integer ?=10)
POST 	 /collection/:id/edit					controllers.CollectionController.editCollection(id)
GET		 /collection/favorites					controllers.CollectionController.getFavorites()
POST     /collection/liked			            controllers.CollectionController.addToFavorites()
DELETE   /collection/unliked/:recId			    controllers.CollectionController.removeFromFavorites(recId)

# Cache Controller
GET		 /cache/byUrl							controllers.CacheController.getImage(url, thumbnail: Boolean ?= true)

# Exhibition Controller
POST     /exhibition/create                     controllers.ExhibitionController.createExhibition()
GET		 /exhibition/list						controllers.ExhibitionController.listMyExhibitions(offset: Integer ?=0, count: Integer ?=10)

# Not Implemented
GET 	 /collection/:id/download				controllers.CollectionController.download(id)
GET	     /collection/:id 	        			controllers.CollectionController.getCollection(id)
POST	 /collection/:id 						controllers.CollectionController.editCollection(id)
DELETE   /collection/:id	                    controllers.CollectionController.deleteCollection(id)

# Record Controller (tested)
GET 	/record/findInCollections				controllers.RecordController.findInCollections(source: String ?="", sourceId: String ?="", annot: Boolean ?=false)
GET		/record/:id								controllers.RecordController.getRecord(id, format: String ?="XML-EDM")
POST 	/record/:id								controllers.RecordController.updateRecord(id, format: String ?="XML-EDM")
DELETE	/record/:id								controllers.RecordController.deleteRecord(id, format: String ?="XML-EDM")

#Group Manager
POST	/group/create							controllers.GroupManager.createGroup()
DELETE 	/group/:id								controllers.GroupManager.deleteGroup(id)

# Rights Controller
#GET 	/rights/list							controllers.RightsController.listRights(ownerId: String ?="")
POST 	/rights/:colId/:right					controllers.RightsController.setRights(colId, right, username: String ?=null, email: String ?=null, userId: String ?=null)

# Media Controller
POST	/media/create							controllers.MediaController.createMedia( file: Boolean ?= false)
GET 	/media/:id								controllers.MediaController.getMetadataOrFile(id, file: Boolean ?=false)
POST 	/media/:id 								controllers.MediaController.editMetadataOrFile(id, file: Boolean ?=false)
DELETE 	/media/:id								controllers.MediaController.deleteMedia(id)

# User Manager Controller

POST	/user/register						    controllers.UserManager.register()
POST	/user/login							    controllers.UserManager.login()
GET		/user/logout						    controllers.UserManager.logout()
GET		/user/listNames			                controllers.UserManager.listNames(prefix:java.lang.String ?= "")
GET		/user/emailAvailable	                controllers.UserManager.emailAvailable(email:java.lang.String)
GET		/user/token				                controllers.UserManager.getToken()
GET 	/user/loginWithToken	                controllers.UserManager.loginWithToken( token: java.lang.String )
GET		/user/:id/photo			                controllers.UserManager.getUserPhoto(id)
GET		/user/:id				                controllers.UserManager.getUser(id)
PUT		/user/:id				                controllers.UserManager.editUser(id)
GET		/user/addToGroup/:id	                controllers.UserManager.addUserToGroup(id, gid: String)
DELETE	/user/:id				                controllers.UserManager.deleteUser(id)
GET		/user/resetPassword/:emailOrUserName	controllers.UserManager.resetPassword(emailOrUserName: String)
POST	/user/changePassword					controllers.UserManager.changePassword()

# trigger reindex (for development / admin )

GET	/api/reindex		controllers.SearchController.reindex()
